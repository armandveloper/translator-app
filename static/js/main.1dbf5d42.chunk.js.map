{"version":3,"sources":["components/Spinner.tsx","components/LoadingFallback.tsx","App.tsx","reportWebVitals.ts","index.tsx","styles/animations.ts"],"names":["Spinner","styled","div","attrs","props","role","spinnerGrowAnimation","Styled","LoadingFallback","ThemeProvider","lazy","then","default","TranslateProvider","GlobalStyles","HomePage","App","fallback","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","showAlertAnimation","keyframes","hideAlertAnimation","showToastAnimation","hideToastAnimation"],"mappings":"yLAeeA,EAZCC,IAAOC,IAAIC,OAAM,SAACC,GAAD,MAAY,CAC5CC,KAAM,SACN,aAAcD,EAAM,eAAiB,gBAFtBH,CAAH,sLASCK,K,OCTRC,EAASN,IAAOC,IAAV,0JAgBGM,MARf,WACC,OACC,cAACD,EAAD,UACC,cAAC,EAAD,OCZGE,EAAgBC,gBAAK,kBAC1B,6BAAiCC,MAAK,kBAAwB,CAC7DC,QADqC,EAAGH,qBAIpCI,EAAoBH,gBAAK,kBAC9B,6BAAqCC,MAAK,kBAA4B,CACrEC,QADyC,EAAGC,yBAIxCC,EAAeJ,gBAAK,kBAAM,gCAC1BK,EAAWL,gBAAK,kBAAM,sDAebM,MAbf,WACC,OACC,cAAC,WAAD,CAAUC,SAAU,cAAC,EAAD,IAApB,SACC,cAACR,EAAD,UACC,eAACI,EAAD,WACC,cAACC,EAAD,IACA,cAACC,EAAD,YCPUG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCJdO,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAMzBZ,K,qOCbaa,EAAqBC,YAAH,0FASlBC,EAAqBD,YAAH,2FASlBE,EAAqBF,YAAH,wIASlBG,EAAqBH,YAAH,wIASlB1B,EAAuB0B,YAAH,0H","file":"static/js/main.1dbf5d42.chunk.js","sourcesContent":["import styled from 'styled-components';\r\nimport { spinnerGrowAnimation } from '../styles/animations';\r\n\r\nconst Spinner = styled.div.attrs((props) => ({\r\n\trole: 'status',\r\n\t'aria-label': props['aria-label'] || 'Loading...',\r\n}))`\r\n\tbackground-color: var(--color-primary);\r\n\tborder-radius: 50%;\r\n\twidth: 4rem;\r\n\theight: 4rem;\r\n\topacity: 0;\r\n\tanimation: ${spinnerGrowAnimation} 0.75s linear infinite;\r\n`;\r\n\r\nexport default Spinner;\r\n","import styled from 'styled-components';\r\nimport Spinner from './Spinner';\r\n\r\nconst Styled = styled.div`\r\n\tbackground-color: var(--color-bg);\r\n\theight: 100vh;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n`;\r\n\r\nfunction LoadingFallback() {\r\n\treturn (\r\n\t\t<Styled>\r\n\t\t\t<Spinner />\r\n\t\t</Styled>\r\n\t);\r\n}\r\n\r\nexport default LoadingFallback;\r\n","import { lazy, Suspense } from 'react';\r\nimport LoadingFallback from './components/LoadingFallback';\r\nconst ThemeProvider = lazy(() =>\r\n\timport('./context/ThemeContext').then(({ ThemeProvider }) => ({\r\n\t\tdefault: ThemeProvider,\r\n\t}))\r\n);\r\nconst TranslateProvider = lazy(() =>\r\n\timport('./context/TranslateContext').then(({ TranslateProvider }) => ({\r\n\t\tdefault: TranslateProvider,\r\n\t}))\r\n);\r\nconst GlobalStyles = lazy(() => import('./styles/globalStyles'));\r\nconst HomePage = lazy(() => import('./pages/HomePage'));\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<Suspense fallback={<LoadingFallback />}>\r\n\t\t\t<ThemeProvider>\r\n\t\t\t\t<TranslateProvider>\r\n\t\t\t\t\t<GlobalStyles />\r\n\t\t\t\t\t<HomePage />\r\n\t\t\t\t</TranslateProvider>\r\n\t\t\t</ThemeProvider>\r\n\t\t</Suspense>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { keyframes } from 'styled-components';\r\n\r\nexport const showAlertAnimation = keyframes`\r\n  from {\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nexport const hideAlertAnimation = keyframes`\r\n  from {\r\n    opacity: 1;\r\n   }\r\n  to {\r\n    opacity: 0;\r\n  }\r\n`;\r\n\r\nexport const showToastAnimation = keyframes`\r\n  from {\r\n    transform: translate3d(0, 10rem, 0);\r\n  }\r\n  to {\r\n    transform: translate3d(0, 0, 0);\r\n  }\r\n`;\r\n\r\nexport const hideToastAnimation = keyframes`\r\n  from {\r\n    transform: translate3d(0, 0, 0);\r\n  }\r\n  to {\r\n    transform: translate3d(0, 10rem, 0);\r\n  }\r\n`;\r\n\r\nexport const spinnerGrowAnimation = keyframes`\r\n  0% {\r\n    transform: scale(0);\r\n  }\r\n  50% {\r\n    opacity: 1;\r\n    transform: none;\r\n  }\r\n`;\r\n"],"sourceRoot":""}