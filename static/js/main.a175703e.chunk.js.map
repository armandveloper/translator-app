{"version":3,"sources":["hooks/useTheme.ts","context/ThemeContext.tsx","styles/globalStyles.tsx","components/Switch.tsx","components/Wrapper.tsx","components/Header.tsx","components/LanguagesBar.tsx","styles/mixins.ts","components/TextBox.tsx","components/BtnIcon.tsx","components/SourceBox.tsx","components/ResultBox.tsx","components/Translator.tsx","pages/HomePage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useTheme","useState","theme","setTheme","useEffect","handleColorScheme","e","matches","lsTheme","window","localStorage","getItem","mql","matchMedia","addEventListener","removeEventListener","setItem","document","body","className","ThemeContext","createContext","ThemeProvider","children","Provider","value","GlobalStyles","createGlobalStyle","StyledSwitch","styled","label","on","Switch","useContext","onChange","currentTarget","checked","type","Wrapper","div","Title","h1","HeaderContent","Header","StyledBar","LanguageList","ul","LanguageItem","li","SwapLanguage","button","LanguagesBar","sourceLanguage","resultLanguage","swapLanguages","setSourceLanguage","setResultLanguage","handleSourceClick","event","language","dataset","lang","handleResultClick","onClick","data-lang","title","color","size","textBoxStyles","css","TextBox","Actions","TextArea","textarea","BtnIcon","CharactersCounter","span","SourceBox","ResultBox","StyledTranslator","main","Grid","Translator","aux","HomePage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a175703e.chunk.js","sourcesContent":["import { Dispatch, SetStateAction, useEffect, useState } from 'react';\n\ntype AppTheme = 'light' | 'dark';\n\nconst useTheme = (): [AppTheme, Dispatch<SetStateAction<AppTheme>>] => {\n\tconst [theme, setTheme] = useState<AppTheme>('dark');\n\n\tuseEffect(() => {\n\t\tconst handleColorScheme = (e: MediaQueryListEvent) => {\n\t\t\tsetTheme(e.matches ? 'light' : 'dark');\n\t\t};\n\n\t\tconst lsTheme = window.localStorage.getItem('translator-app:theme');\n\n\t\tif (lsTheme === 'light') {\n\t\t\tsetTheme(lsTheme);\n\t\t\treturn;\n\t\t}\n\t\tconst mql: MediaQueryList = window.matchMedia(\n\t\t\t'(prefers-color-scheme: light)'\n\t\t);\n\n\t\tif (mql.matches) {\n\t\t\tsetTheme('light');\n\t\t}\n\n\t\tmql.addEventListener('change', handleColorScheme);\n\n\t\treturn () => mql.removeEventListener('change', handleColorScheme);\n\t}, []);\n\n\tuseEffect(() => {\n\t\twindow.localStorage.setItem('translator-app:theme', theme);\n\t\tdocument.body.className = theme;\n\t}, [theme]);\n\n\treturn [theme, setTheme];\n};\n\nexport default useTheme;\n","import { createContext, Dispatch, ReactNode, SetStateAction } from 'react';\nimport AppTheme from '../constants/theme';\nimport useTheme from '../hooks/useTheme';\n\ninterface ThemeContextInt {\n\ttheme: AppTheme;\n\tsetTheme: Dispatch<SetStateAction<AppTheme>>;\n}\n\nexport const ThemeContext = createContext({} as ThemeContextInt);\n\nexport const ThemeProvider = ({ children }: { children: ReactNode }) => {\n\tconst [theme, setTheme] = useTheme();\n\n\treturn (\n\t\t<ThemeContext.Provider\n\t\t\tvalue={{\n\t\t\t\ttheme,\n\t\t\t\tsetTheme,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</ThemeContext.Provider>\n\t);\n};\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n  :root {\n    --color-bg: #121212;\n    --color-bg-3:#424242;\n    --color-text: #fff;\n    --color-primary: #5290f5;\n  }\n  @media (prefers-color-scheme: light) {\n    :root {\n      --color-bg: #fff;\n      --color-bg-3:#d8d8d8;\n      --color-text: #000;\n      --color-primary: #5290f5;  \n    }\n  }\n  html {\n    box-sizing: border-box;\n    font-size: 62.5%;\n  }\n  *,\n  *::before,\n  *::after {\n    box-sizing: inherit;\n  }\n  body {\n    background-color: var(--color-bg);\n    color: var(--color-text);\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    font-size: 1.6rem;\n    line-height: 1.4;\n    margin: 0;\n  }\n  body.light {\n    --color-bg: #fff;\n    --color-bg-3:#d8d8d8;\n    --color-text: #000;\n    --color-primary: #5290f5;  \n  }\n  @media (any-hover: hover) {\n    [title] {\n    position: relative;\n    }\n    [title]:hover::before {\n      content: attr(title);\n      position: absolute;\n      bottom: 100%;\n      left: 0;\n      display: inline-block;\n      padding: 0.3rem 0.6rem;\n      border-radius: 2px;\n      background: #000;\n      color: #fff;\n      font-size: 1.2rem,;\n      font-family: inherit;\n      white-space: nowrap;\n    }\n  }\n`;\n\nexport default GlobalStyles;\n","import { ChangeEvent, useContext } from 'react';\nimport styled from 'styled-components';\nimport { ThemeContext } from '../context/ThemeContext';\n\ninterface SwitchProps {\n\ton: boolean;\n}\n\nconst StyledSwitch = styled.label<SwitchProps>`\n\tbackground-color: ${({ on }) => (on ? 'var(--color-primary)' : '#4d4d4d')};\n\tborder-radius: 2.5rem;\n\twidth: 6rem;\n\theight: 2.5rem;\n\tpadding: 0.2rem;\n\ttransition: 0.3s ease;\n\t.switch-thumb {\n\t\tbackground-color: #fff;\n\t\tborder-radius: 50%;\n\t\tdisplay: block;\n\t\theight: 2rem;\n\t\twidth: 2rem;\n\t\ttransition: transform 0.3s ease-in;\n\t}\n\tinput[type='checkbox'] {\n\t\tdisplay: none;\n\t}\n\tinput[type='checkbox']:checked ~ .switch-thumb {\n\t\ttransform: translate3d(3.6rem, 0, 0);\n\t}\n`;\n\nfunction Switch({ on }: SwitchProps) {\n\tconst { setTheme } = useContext(ThemeContext);\n\n\tconst handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tsetTheme(e.currentTarget.checked ? 'dark' : 'light');\n\t};\n\n\treturn (\n\t\t<StyledSwitch on={on}>\n\t\t\t<input onChange={handleChange} type=\"checkbox\" checked={on} />\n\t\t\t<span className=\"switch-thumb\" />\n\t\t</StyledSwitch>\n\t);\n}\n\nexport default Switch;\n","import styled from 'styled-components';\n\nconst Wrapper = styled.div`\n\tmax-width: 124rem;\n\tmargin: 0 auto;\n\tpadding: 0 2rem;\n\twidth: 100%;\n`;\n\nexport default Wrapper;\n","import { useContext } from 'react';\nimport styled from 'styled-components';\nimport { ThemeContext } from '../context/ThemeContext';\nimport Switch from './Switch';\nimport Wrapper from './Wrapper';\n\nconst Title = styled.h1`\n\tcursor: default;\n\tfont-size: 3rem;\n\tfont-weight: 500;\n`;\n\nconst HeaderContent = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-between;\n`;\n\nfunction Header() {\n\tconst { theme } = useContext(ThemeContext);\n\n\treturn (\n\t\t<header>\n\t\t\t<Wrapper>\n\t\t\t\t<HeaderContent>\n\t\t\t\t\t<Title>Translate</Title>\n\t\t\t\t\t<Switch on={theme === 'dark'} />\n\t\t\t\t</HeaderContent>\n\t\t\t</Wrapper>\n\t\t</header>\n\t);\n}\n\nexport default Header;\n","import { Dispatch, MouseEvent, SetStateAction } from 'react';\nimport styled from 'styled-components';\nimport { MdSwapHoriz } from 'react-icons/md';\nimport Languages from '../constants/languages';\n\ninterface LanguagesBarProps {\n\tsourceLanguage: Languages;\n\tresultLanguage: Languages;\n\tswapLanguages(): void;\n\tsetSourceLanguage: Dispatch<SetStateAction<Languages>>;\n\tsetResultLanguage: Dispatch<SetStateAction<Languages>>;\n}\n\nconst StyledBar = styled.div`\n\tgrid-column: 1 / -1;\n\tdisplay: flex;\n\tmargin-bottom: 3rem;\n\tpadding: 0 2rem;\n\tbox-shadow: 0 0 5px 2px var(--color-bg-3);\n\tborder-radius: 10rem;\n`;\n\nconst LanguageList = styled.ul`\n\tflex: 1;\n\tlist-style: none;\n\tmargin: 0;\n\tpadding: 0;\n\tdisplay: flex;\n\t&:last-of-type {\n\t\tjustify-content: flex-end;\n\t}\n`;\n\nconst LanguageItem = styled.li`\n\tborder-bottom: 3px solid transparent;\n\tcolor: var(--color-primary);\n\tcursor: pointer;\n\tpadding: 0.8rem 1.5rem;\n\ttext-align: center;\n\tuser-select: none;\n\ttransition: 0.3s ease;\n\tdisplay: inline-flex;\n\talign-items: center;\n\t&:hover,\n\t&:focus {\n\t\tbackground-color: var(--color-bg-3);\n\t}\n\n\t&:not(.selected) {\n\t\tdisplay: none;\n\t}\n\t@media (min-width: 56.25em) {\n\t\tcolor: var(--color-text);\n\t\t&.selected {\n\t\t\tborder-bottom-color: var(--color-primary);\n\t\t}\n\t\t&:not(.selected) {\n\t\t\tdisplay: inline-flex;\n\t\t}\n\t}\n`;\n\nconst SwapLanguage = styled.button`\n\tbackground-color: var(--color-primary);\n\tborder: none;\n\tborder-radius: 50%;\n\tcolor: #fff;\n\tcursor: pointer;\n\theight: 5rem;\n\tmargin: 0;\n\tpadding: 0;\n\twidth: 5rem;\n\t/* position: relative;\n\ttop: -2rem; */\n`;\n\nfunction LanguagesBar({\n\tsourceLanguage,\n\tresultLanguage,\n\tswapLanguages,\n\tsetSourceLanguage,\n\tsetResultLanguage,\n}: LanguagesBarProps) {\n\tconst handleSourceClick = (event: MouseEvent<HTMLLIElement>) => {\n\t\tconst language = event.currentTarget.dataset.lang as Languages;\n\t\tif (language === resultLanguage) {\n\t\t\tswapLanguages();\n\t\t\treturn;\n\t\t}\n\t\tsetSourceLanguage(language);\n\t};\n\n\tconst handleResultClick = (event: MouseEvent<HTMLLIElement>) => {\n\t\tconst language = event.currentTarget.dataset.lang as Languages;\n\t\tif (language === sourceLanguage) {\n\t\t\tswapLanguages();\n\t\t\treturn;\n\t\t}\n\t\tsetResultLanguage(language);\n\t};\n\n\treturn (\n\t\t<StyledBar>\n\t\t\t<LanguageList>\n\t\t\t\t{/* <LanguageItem>Detect Language</LanguageItem> */}\n\t\t\t\t<LanguageItem\n\t\t\t\t\tonClick={handleSourceClick}\n\t\t\t\t\tdata-lang=\"en\"\n\t\t\t\t\tclassName={sourceLanguage === 'en' ? 'selected' : ''}\n\t\t\t\t>\n\t\t\t\t\tEnglish\n\t\t\t\t</LanguageItem>\n\t\t\t\t<LanguageItem\n\t\t\t\t\tonClick={handleSourceClick}\n\t\t\t\t\tdata-lang=\"es\"\n\t\t\t\t\tclassName={sourceLanguage === 'es' ? 'selected' : ''}\n\t\t\t\t>\n\t\t\t\t\tSpanish\n\t\t\t\t</LanguageItem>\n\t\t\t</LanguageList>\n\t\t\t<SwapLanguage title=\"Swap Language\" onClick={swapLanguages}>\n\t\t\t\t<MdSwapHoriz color=\"currentColor\" size=\"28\" />\n\t\t\t</SwapLanguage>\n\t\t\t<LanguageList>\n\t\t\t\t<LanguageItem\n\t\t\t\t\tonClick={handleResultClick}\n\t\t\t\t\tdata-lang=\"en\"\n\t\t\t\t\tclassName={resultLanguage === 'en' ? 'selected' : ''}\n\t\t\t\t>\n\t\t\t\t\tEnglish\n\t\t\t\t</LanguageItem>\n\t\t\t\t<LanguageItem\n\t\t\t\t\tonClick={handleResultClick}\n\t\t\t\t\tdata-lang=\"es\"\n\t\t\t\t\tclassName={resultLanguage === 'es' ? 'selected' : ''}\n\t\t\t\t>\n\t\t\t\t\tSpanish\n\t\t\t\t</LanguageItem>\n\t\t\t</LanguageList>\n\t\t</StyledBar>\n\t);\n}\n\nexport default LanguagesBar;\n","import { css } from 'styled-components';\n\nexport const textBoxStyles = css`\n\tborder-radius: 2.5rem;\n\tbox-shadow: 0 0 5px 2px var(--color-bg-3);\n\theight: auto;\n\tpadding: 2rem 2rem 0;\n`;\n","import styled from 'styled-components';\nimport { textBoxStyles } from '../styles/mixins';\n\nconst TextBox = styled.div`\n\t${textBoxStyles};\n`;\n\nexport const Actions = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n`;\n\nexport const TextArea = styled.textarea`\n\tbackground: none;\n\tcolor: var(--color-text);\n\tdisplay: block;\n\tfont-family: inherit;\n\tfont-size: 1.6rem;\n\tline-height: 1.6;\n\tmin-height: 17rem;\n\theight: auto;\n\tresize: none;\n\toverflow: hidden;\n\tpadding-bottom: 2rem;\n\twidth: 100%;\n\t&:focus {\n\t\toutline: none;\n\t}\n`;\n\n// function calcHeight(scrollHeight: number): number {\n// \tconsole.log('scroll height:', scrollHeight);\n// \tif (!scrollHeight) return 170;\n// \t// Height / line height\n// \tconst lines = Math.ceil(scrollHeight / 25.6);\n// \t// min-height + lines x line-height + padding + border\n// \tconst newHeight = Math.ceil(lines * 25.6);\n// \tconsole.log(lines);\n// \treturn newHeight;\n// }\n\nexport default TextBox;\n","import styled from 'styled-components';\n\nconst BtnIcon = styled.button`\n\tbackground: none;\n\tborder: none;\n\tcolor: inherit;\n\tcursor: pointer;\n\tdisplay: inline-block;\n\tmargin: 0;\n\tpadding: 1.2rem;\n\ttext-align: center;\n`;\n\nexport default BtnIcon;\n","import styled from 'styled-components';\nimport { MdMic, MdVolumeUp } from 'react-icons/md';\nimport TextBox, { Actions, TextArea } from './TextBox';\nimport BtnIcon from './BtnIcon';\n\nconst CharactersCounter = styled.span`\n\tmargin-left: auto;\n`;\n\nfunction SourceBox() {\n\treturn (\n\t\t<TextBox>\n\t\t\t<TextArea />\n\t\t\t<Actions>\n\t\t\t\t<BtnIcon title=\"Translate by voice\">\n\t\t\t\t\t<MdMic size=\"24\" color=\"currentColor\" />\n\t\t\t\t</BtnIcon>\n\t\t\t\t<BtnIcon title=\"Listen\">\n\t\t\t\t\t<MdVolumeUp size=\"24\" color=\"currentColor\" />\n\t\t\t\t</BtnIcon>\n\t\t\t\t<CharactersCounter>0 / 2000</CharactersCounter>\n\t\t\t</Actions>\n\t\t</TextBox>\n\t);\n}\n\nexport default SourceBox;\n","import TextBox, { Actions, TextArea } from './TextBox';\nimport BtnIcon from './BtnIcon';\nimport { MdContentCopy, MdVolumeUp } from 'react-icons/md';\n\nfunction ResultBox() {\n\treturn (\n\t\t<TextBox>\n\t\t\t<TextArea />\n\t\t\t<Actions>\n\t\t\t\t<BtnIcon title=\"Listen\">\n\t\t\t\t\t<MdVolumeUp size=\"24\" color=\"currentColor\" />\n\t\t\t\t</BtnIcon>\n\t\t\t\t<BtnIcon title=\"Copy translation\">\n\t\t\t\t\t<MdContentCopy size=\"24\" color=\"currentColor\" />\n\t\t\t\t</BtnIcon>\n\t\t\t</Actions>\n\t\t</TextBox>\n\t);\n}\n\nexport default ResultBox;\n","import { useState } from 'react';\nimport styled from 'styled-components';\nimport LanguageList from '../constants/languages';\nimport Wrapper from './Wrapper';\nimport LanguagesBar from './LanguagesBar';\nimport SourceBox from './SourceBox';\nimport ResultBox from './ResultBox';\n\nconst StyledTranslator = styled.main`\n\tmargin-top: 4em;\n\tmargin-bottom: 2rem;\n`;\n\nconst Grid = styled.div`\n\tdisplay: grid;\n\tgap: 2rem;\n\t@media (min-width: 56.25em) {\n\t\tgap: 0;\n\t\tgrid-template-columns: repeat(2, 1fr);\n\t}\n`;\n\nfunction Translator() {\n\t// const languages = ['en', 'es'];\n\tconst [sourceLanguage, setSourceLanguage] = useState<LanguageList>('en');\n\tconst [resultLanguage, setResultLanguage] = useState<LanguageList>('es');\n\n\tconst swapLanguages = (): void => {\n\t\tconst aux: LanguageList = sourceLanguage;\n\t\tsetSourceLanguage(resultLanguage);\n\t\tsetResultLanguage(aux);\n\t};\n\n\treturn (\n\t\t<StyledTranslator>\n\t\t\t<Wrapper>\n\t\t\t\t<Grid>\n\t\t\t\t\t<LanguagesBar\n\t\t\t\t\t\tsourceLanguage={sourceLanguage}\n\t\t\t\t\t\tresultLanguage={resultLanguage}\n\t\t\t\t\t\tswapLanguages={swapLanguages}\n\t\t\t\t\t\tsetSourceLanguage={setSourceLanguage}\n\t\t\t\t\t\tsetResultLanguage={setResultLanguage}\n\t\t\t\t\t/>\n\t\t\t\t\t<SourceBox />\n\t\t\t\t\t<ResultBox />\n\t\t\t\t</Grid>\n\t\t\t</Wrapper>\n\t\t</StyledTranslator>\n\t);\n}\n\nexport default Translator;\n","import Header from '../components/Header';\nimport Translator from '../components/Translator';\n\nfunction HomePage() {\n\treturn (\n\t\t<div>\n\t\t\t<Header />\n\t\t\t<Translator />\n\t\t</div>\n\t);\n}\n\nexport default HomePage;\n","import { ThemeProvider } from './context/ThemeContext';\nimport GlobalStyles from './styles/globalStyles';\nimport HomePage from './pages/HomePage';\n\nfunction App() {\n\treturn (\n\t\t<ThemeProvider>\n\t\t\t<GlobalStyles />\n\t\t\t<HomePage />\n\t\t</ThemeProvider>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}