{"version":3,"sources":["components/Spinner.tsx","components/LoadingFallback.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx","styles/animations.ts"],"names":["Spinner","styled","div","attrs","props","role","spinnerGrowAnimation","Styled","LoadingFallback","ThemeProvider","lazy","then","default","TranslateProvider","GlobalStyles","HomePage","App","fallback","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","showAlertAnimation","keyframes","hideAlertAnimation","showToastAnimation","hideToastAnimation"],"mappings":"yLAeeA,EAZCC,IAAOC,IAAIC,OAAM,SAACC,GAAD,MAAY,CAC5CC,KAAM,SACN,aAAcD,EAAM,eAAiB,gBAFtBH,CAAH,sLASCK,K,OCTRC,EAASN,IAAOC,IAAV,0JAgBGM,MARf,WACC,OACC,cAACD,EAAD,UACC,cAAC,EAAD,OCZGE,EAAgBC,gBAAK,kBAC1B,6BAAiCC,MAAK,kBAAwB,CAC7DC,QADqC,EAAGH,qBAIpCI,EAAoBH,gBAAK,kBAC9B,6BAAqCC,MAAK,kBAA4B,CACrEC,QADyC,EAAGC,yBAIxCC,EAAeJ,gBAAK,kBAAM,gCAC1BK,EAAWL,gBAAK,kBAAM,sDAebM,MAbf,WACC,OACC,cAAC,WAAD,CAAUC,SAAU,cAAC,EAAD,IAApB,SACC,cAACR,EAAD,UACC,eAACI,EAAD,WACC,cAACC,EAAD,IACA,cAACC,EAAD,YCTCG,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DA0CnC,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTd,MAAK,SAACmB,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,+GAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAAST,KAMlBO,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MCjGjE,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SFelB,SAAkB7B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI6B,IAAIC,kBAAwBrC,OAAOC,SAASqC,MACpDC,SAAWvC,OAAOC,SAASsC,OAIvC,OAGFvC,OAAOwC,iBAAiB,QAAQ,WAC9B,IAAMnC,EAAK,UAAMgC,kBAAN,sBAEPvC,IAgEV,SAAiCO,EAAeC,GAE9CmC,MAAMpC,EAAO,CACXqC,QAAS,CAAE,iBAAkB,YAE5BnD,MAAK,SAACoD,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CxC,UAAUC,cAAcwC,MAAMzD,MAAK,SAACmB,GAClCA,EAAauC,aAAa1D,MAAK,WAC7BS,OAAOC,SAASiD,eAKpB9C,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IAAI,oEAtFViC,CAAwB9C,EAAOC,GAI/BC,UAAUC,cAAcwC,MAAMzD,MAAK,WACjC0B,QAAQC,IACN,+GAMJd,EAAgBC,EAAOC,OExC/B8C,GAKA7B,K,qOChBa8B,EAAqBC,YAAH,0FASlBC,EAAqBD,YAAH,2FASlBE,EAAqBF,YAAH,wIASlBG,EAAqBH,YAAH,wIASlBpE,EAAuBoE,YAAH,0H","file":"static/js/main.f8ddf995.chunk.js","sourcesContent":["import styled from 'styled-components';\r\nimport { spinnerGrowAnimation } from '../styles/animations';\r\n\r\nconst Spinner = styled.div.attrs((props) => ({\r\n\trole: 'status',\r\n\t'aria-label': props['aria-label'] || 'Loading...',\r\n}))`\r\n\tbackground-color: var(--color-primary);\r\n\tborder-radius: 50%;\r\n\twidth: 4rem;\r\n\theight: 4rem;\r\n\topacity: 0;\r\n\tanimation: ${spinnerGrowAnimation} 0.75s linear infinite;\r\n`;\r\n\r\nexport default Spinner;\r\n","import styled from 'styled-components';\r\nimport Spinner from './Spinner';\r\n\r\nconst Styled = styled.div`\r\n\tbackground-color: var(--color-bg);\r\n\theight: 100vh;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n`;\r\n\r\nfunction LoadingFallback() {\r\n\treturn (\r\n\t\t<Styled>\r\n\t\t\t<Spinner />\r\n\t\t</Styled>\r\n\t);\r\n}\r\n\r\nexport default LoadingFallback;\r\n","import { lazy, Suspense } from 'react';\r\nimport LoadingFallback from './components/LoadingFallback';\r\nconst ThemeProvider = lazy(() =>\r\n\timport('./context/ThemeContext').then(({ ThemeProvider }) => ({\r\n\t\tdefault: ThemeProvider,\r\n\t}))\r\n);\r\nconst TranslateProvider = lazy(() =>\r\n\timport('./context/TranslateContext').then(({ TranslateProvider }) => ({\r\n\t\tdefault: TranslateProvider,\r\n\t}))\r\n);\r\nconst GlobalStyles = lazy(() => import('./styles/globalStyles'));\r\nconst HomePage = lazy(() => import('./pages/HomePage'));\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<Suspense fallback={<LoadingFallback />}>\r\n\t\t\t<ThemeProvider>\r\n\t\t\t\t<TranslateProvider>\r\n\t\t\t\t\t<GlobalStyles />\r\n\t\t\t\t\t<HomePage />\r\n\t\t\t\t</TranslateProvider>\r\n\t\t\t</ThemeProvider>\r\n\t\t</Suspense>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import { keyframes } from 'styled-components';\r\n\r\nexport const showAlertAnimation = keyframes`\r\n  from {\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nexport const hideAlertAnimation = keyframes`\r\n  from {\r\n    opacity: 1;\r\n   }\r\n  to {\r\n    opacity: 0;\r\n  }\r\n`;\r\n\r\nexport const showToastAnimation = keyframes`\r\n  from {\r\n    transform: translate3d(0, 10rem, 0);\r\n  }\r\n  to {\r\n    transform: translate3d(0, 0, 0);\r\n  }\r\n`;\r\n\r\nexport const hideToastAnimation = keyframes`\r\n  from {\r\n    transform: translate3d(0, 0, 0);\r\n  }\r\n  to {\r\n    transform: translate3d(0, 10rem, 0);\r\n  }\r\n`;\r\n\r\nexport const spinnerGrowAnimation = keyframes`\r\n  0% {\r\n    transform: scale(0);\r\n  }\r\n  50% {\r\n    opacity: 1;\r\n    transform: none;\r\n  }\r\n`;\r\n"],"sourceRoot":""}