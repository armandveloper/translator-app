{"version":3,"sources":["hooks/useTheme.ts","context/ThemeContext.tsx","context/SpeechContext.tsx","styles/globalStyles.tsx","components/Switch.tsx","components/Wrapper.tsx","components/Header.tsx","components/LanguagesBar.tsx","hooks/useSpeechSynthesis.ts","hooks/useSpeechRecognition.ts","styles/mixins.ts","components/TextBox.tsx","components/BtnIcon.tsx","components/BtnWithPlayState.tsx","components/SourceBox.tsx","components/ResultBox.tsx","helpers/clipboard.ts","components/Translator.tsx","pages/HomePage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useTheme","useState","theme","setTheme","useEffect","handleColorScheme","e","matches","lsTheme","window","localStorage","getItem","mql","matchMedia","addEventListener","removeEventListener","setItem","document","body","className","ThemeContext","createContext","ThemeProvider","children","Provider","value","SpeechContext","SpeechProvider","hello","GlobalStyles","createGlobalStyle","StyledSwitch","styled","label","on","Switch","useContext","onChange","currentTarget","checked","type","Wrapper","div","Title","h1","HeaderContent","Header","StyledBar","LanguageList","ul","LanguageItem","li","SwapLanguage","button","LanguagesBar","sourceLanguage","resultLanguage","swapLanguages","setSourceLanguage","setResultLanguage","handleSourceClick","event","language","dataset","lang","handleResultClick","onClick","data-lang","aria-label","data-title","color","size","useSpeechSynthesis","text","undefined","speechSynthesis","onEnd","utterance","SpeechSynthesisUtterance","onend","speak","cancel","useSpeechRecognition","setText","isSupported","SpeechRecognition","isSupportedWithPrefix","webkitSpeechRecognition","speech","console","log","start","results","Array","from","transcript","onSpeak","abort","textBoxStyles","css","TextBox","Actions","TextArea","textarea","BtnIcon","show","BtnWithPlayState","icon","title","onCancel","isPlaying","setPlaying","CharactersCounter","span","BtnClear","SourceBox","charactersLimit","isSpeechSynthesisSupported","textToSpeech","cancelSpeechSynthesis","isSpeechRecognitionSupported","startSpeechRecognition","abortSpeechRecognition","length","data-tooltip-pos","maxLength","substring","ResultBox","textAreaRef","useRef","ref","defaultValue","readOnly","element","navigator","clipboard","writeText","Promise","res","select","execCommand","getSelection","removeAllRanges","current","StyledTranslator","main","Grid","Translator","aux","HomePage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d6d16ec2.chunk.js","sourcesContent":["import { Dispatch, SetStateAction, useEffect, useState } from 'react';\n\ntype AppTheme = 'light' | 'dark';\n\nconst useTheme = (): [AppTheme, Dispatch<SetStateAction<AppTheme>>] => {\n\tconst [theme, setTheme] = useState<AppTheme>('dark');\n\n\tuseEffect(() => {\n\t\tconst handleColorScheme = (e: MediaQueryListEvent) => {\n\t\t\tsetTheme(e.matches ? 'light' : 'dark');\n\t\t};\n\n\t\tconst lsTheme = window.localStorage.getItem('translator-app:theme');\n\n\t\tif (lsTheme === 'light') {\n\t\t\tsetTheme(lsTheme);\n\t\t\treturn;\n\t\t}\n\t\tconst mql: MediaQueryList = window.matchMedia(\n\t\t\t'(prefers-color-scheme: light)'\n\t\t);\n\n\t\tif (mql.matches) {\n\t\t\tsetTheme('light');\n\t\t}\n\n\t\tmql.addEventListener('change', handleColorScheme);\n\n\t\treturn () => mql.removeEventListener('change', handleColorScheme);\n\t}, []);\n\n\tuseEffect(() => {\n\t\twindow.localStorage.setItem('translator-app:theme', theme);\n\t\tdocument.body.className = theme;\n\t}, [theme]);\n\n\treturn [theme, setTheme];\n};\n\nexport default useTheme;\n","import { createContext, Dispatch, ReactNode, SetStateAction } from 'react';\nimport AppTheme from '../constants/theme';\nimport useTheme from '../hooks/useTheme';\n\ninterface ThemeContextInt {\n\ttheme: AppTheme;\n\tsetTheme: Dispatch<SetStateAction<AppTheme>>;\n}\n\nexport const ThemeContext = createContext({} as ThemeContextInt);\n\nexport const ThemeProvider = ({ children }: { children: ReactNode }) => {\n\tconst [theme, setTheme] = useTheme();\n\n\treturn (\n\t\t<ThemeContext.Provider\n\t\t\tvalue={{\n\t\t\t\ttheme,\n\t\t\t\tsetTheme,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</ThemeContext.Provider>\n\t);\n};\n","import { createContext, ReactNode } from 'react';\r\n\r\ninterface SpeechContextInt {\r\n\thello: string;\r\n}\r\n\r\nexport const SpeechContext = createContext({} as SpeechContextInt);\r\n\r\nexport const SpeechProvider = ({ children }: { children: ReactNode }) => {\r\n\tconst hello = '';\r\n\r\n\treturn (\r\n\t\t<SpeechContext.Provider\r\n\t\t\tvalue={{\r\n\t\t\t\thello,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{children}\r\n\t\t</SpeechContext.Provider>\r\n\t);\r\n};\r\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n  :root {\n    --color-bg: #121212;\n    --color-bg-3:#424242;\n    --color-text: #fff;\n    --color-primary: #5290f5;\n  }\n  @media (prefers-color-scheme: light) {\n    :root {\n      --color-bg: #fff;\n      --color-bg-3:#d8d8d8;\n      --color-text: #000;\n      --color-primary: #5290f5;  \n    }\n  }\n  html {\n    box-sizing: border-box;\n    font-size: 62.5%;\n  }\n  *,\n  *::before,\n  *::after {\n    box-sizing: inherit;\n  }\n  body {\n    background-color: var(--color-bg);\n    color: var(--color-text);\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    font-size: 1.6rem;\n    line-height: 1.4;\n    margin: 0;\n  }\n  body.light {\n    --color-bg: #fff;\n    --color-bg-3:#d8d8d8;\n    --color-text: #000;\n    --color-primary: #5290f5;  \n  }\n  @media (any-hover: hover) {\n    [data-title] {\n    position: relative;\n    }\n    [data-title]:hover::before {\n      content: attr(data-title);\n      position: absolute;\n      bottom: 100%;\n      left: 0;\n      display: inline-block;\n      padding: 0.3rem 0.6rem;\n      border-radius: 2px;\n      background: #000;\n      color: #fff;\n      font-size: 1.2rem;\n      font-family: inherit;\n      white-space: nowrap;\n    }\n    [data-title][data-tooltip-pos=\"right\"]:hover::before {\n      left: unset;\n      right: 0;\n    }\n  }\n`;\n\nexport default GlobalStyles;\n","import { ChangeEvent, useContext } from 'react';\nimport styled from 'styled-components';\nimport { ThemeContext } from '../context/ThemeContext';\n\ninterface SwitchProps {\n\ton: boolean;\n}\n\nconst StyledSwitch = styled.label<SwitchProps>`\n\tbackground-color: ${({ on }) => (on ? 'var(--color-primary)' : '#4d4d4d')};\n\tborder-radius: 2.5rem;\n\twidth: 6rem;\n\theight: 2.5rem;\n\tpadding: 0.2rem;\n\ttransition: 0.3s ease;\n\t.switch-thumb {\n\t\tbackground-color: #fff;\n\t\tborder-radius: 50%;\n\t\tdisplay: block;\n\t\theight: 2rem;\n\t\twidth: 2rem;\n\t\ttransition: transform 0.3s ease-in;\n\t}\n\tinput[type='checkbox'] {\n\t\tdisplay: none;\n\t}\n\tinput[type='checkbox']:checked ~ .switch-thumb {\n\t\ttransform: translate3d(3.6rem, 0, 0);\n\t}\n`;\n\nfunction Switch({ on }: SwitchProps) {\n\tconst { setTheme } = useContext(ThemeContext);\n\n\tconst handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tsetTheme(e.currentTarget.checked ? 'dark' : 'light');\n\t};\n\n\treturn (\n\t\t<StyledSwitch on={on}>\n\t\t\t<input onChange={handleChange} type=\"checkbox\" checked={on} />\n\t\t\t<span className=\"switch-thumb\" />\n\t\t</StyledSwitch>\n\t);\n}\n\nexport default Switch;\n","import styled from 'styled-components';\n\nconst Wrapper = styled.div`\n\tmax-width: 124rem;\n\tmargin: 0 auto;\n\tpadding: 0 2rem;\n\twidth: 100%;\n`;\n\nexport default Wrapper;\n","import { useContext } from 'react';\nimport styled from 'styled-components';\nimport { ThemeContext } from '../context/ThemeContext';\nimport Switch from './Switch';\nimport Wrapper from './Wrapper';\n\nconst Title = styled.h1`\n\tcursor: default;\n\tfont-size: 3rem;\n\tfont-weight: 500;\n`;\n\nconst HeaderContent = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-between;\n`;\n\nfunction Header() {\n\tconst { theme } = useContext(ThemeContext);\n\n\treturn (\n\t\t<header>\n\t\t\t<Wrapper>\n\t\t\t\t<HeaderContent>\n\t\t\t\t\t<Title>Translate</Title>\n\t\t\t\t\t<Switch on={theme === 'dark'} />\n\t\t\t\t</HeaderContent>\n\t\t\t</Wrapper>\n\t\t</header>\n\t);\n}\n\nexport default Header;\n","import { Dispatch, MouseEvent, SetStateAction } from 'react';\nimport styled from 'styled-components';\nimport { MdSwapHoriz } from 'react-icons/md';\nimport Languages from '../constants/languages';\n\ninterface LanguagesBarProps {\n\tsourceLanguage: Languages;\n\tresultLanguage: Languages;\n\tswapLanguages(): void;\n\tsetSourceLanguage: Dispatch<SetStateAction<Languages>>;\n\tsetResultLanguage: Dispatch<SetStateAction<Languages>>;\n}\n\nconst StyledBar = styled.div`\n\tgrid-column: 1 / -1;\n\tdisplay: flex;\n\tmargin-bottom: 3rem;\n\tpadding: 0 2rem;\n\tbox-shadow: 0 0 5px 2px var(--color-bg-3);\n\tborder-radius: 10rem;\n`;\n\nconst LanguageList = styled.ul`\n\tflex: 1;\n\tlist-style: none;\n\tmargin: 0;\n\tpadding: 0;\n\tdisplay: flex;\n\t&:last-of-type {\n\t\tjustify-content: flex-end;\n\t}\n`;\n\nconst LanguageItem = styled.li`\n\tborder-bottom: 3px solid transparent;\n\tcolor: var(--color-primary);\n\tcursor: pointer;\n\tpadding: 0.8rem 1.5rem;\n\ttext-align: center;\n\tuser-select: none;\n\ttransition: 0.3s ease;\n\tdisplay: inline-flex;\n\talign-items: center;\n\t&:hover,\n\t&:focus {\n\t\tbackground-color: var(--color-bg-3);\n\t}\n\n\t&:not(.selected) {\n\t\tdisplay: none;\n\t}\n\t@media (min-width: 56.25em) {\n\t\tcolor: var(--color-text);\n\t\t&.selected {\n\t\t\tborder-bottom-color: var(--color-primary);\n\t\t}\n\t\t&:not(.selected) {\n\t\t\tdisplay: inline-flex;\n\t\t}\n\t}\n`;\n\nconst SwapLanguage = styled.button`\n\tbackground-color: var(--color-primary);\n\tborder: none;\n\tborder-radius: 50%;\n\tcolor: #fff;\n\tcursor: pointer;\n\theight: 5rem;\n\tmargin: 0;\n\tpadding: 0;\n\twidth: 5rem;\n\t/* position: relative;\n\ttop: -2rem; */\n`;\n\nfunction LanguagesBar({\n\tsourceLanguage,\n\tresultLanguage,\n\tswapLanguages,\n\tsetSourceLanguage,\n\tsetResultLanguage,\n}: LanguagesBarProps) {\n\tconst handleSourceClick = (event: MouseEvent<HTMLLIElement>) => {\n\t\tconst language = event.currentTarget.dataset.lang as Languages;\n\t\tif (language === resultLanguage) {\n\t\t\tswapLanguages();\n\t\t\treturn;\n\t\t}\n\t\tsetSourceLanguage(language);\n\t};\n\n\tconst handleResultClick = (event: MouseEvent<HTMLLIElement>) => {\n\t\tconst language = event.currentTarget.dataset.lang as Languages;\n\t\tif (language === sourceLanguage) {\n\t\t\tswapLanguages();\n\t\t\treturn;\n\t\t}\n\t\tsetResultLanguage(language);\n\t};\n\n\treturn (\n\t\t<StyledBar>\n\t\t\t<LanguageList>\n\t\t\t\t{/* <LanguageItem>Detect Language</LanguageItem> */}\n\t\t\t\t<LanguageItem\n\t\t\t\t\tonClick={handleSourceClick}\n\t\t\t\t\tdata-lang=\"en-US\"\n\t\t\t\t\tclassName={sourceLanguage === 'en-US' ? 'selected' : ''}\n\t\t\t\t>\n\t\t\t\t\tEnglish\n\t\t\t\t</LanguageItem>\n\t\t\t\t<LanguageItem\n\t\t\t\t\tonClick={handleSourceClick}\n\t\t\t\t\tdata-lang=\"es-US\"\n\t\t\t\t\tclassName={sourceLanguage === 'es-US' ? 'selected' : ''}\n\t\t\t\t>\n\t\t\t\t\tSpanish\n\t\t\t\t</LanguageItem>\n\t\t\t</LanguageList>\n\t\t\t<SwapLanguage\n\t\t\t\taria-label=\"Swap Language\"\n\t\t\t\tdata-title=\"Swap Language\"\n\t\t\t\tonClick={swapLanguages}\n\t\t\t>\n\t\t\t\t<MdSwapHoriz color=\"currentColor\" size=\"28\" />\n\t\t\t</SwapLanguage>\n\t\t\t<LanguageList>\n\t\t\t\t<LanguageItem\n\t\t\t\t\tonClick={handleResultClick}\n\t\t\t\t\tdata-lang=\"en-US\"\n\t\t\t\t\tclassName={resultLanguage === 'en-US' ? 'selected' : ''}\n\t\t\t\t>\n\t\t\t\t\tEnglish\n\t\t\t\t</LanguageItem>\n\t\t\t\t<LanguageItem\n\t\t\t\t\tonClick={handleResultClick}\n\t\t\t\t\tdata-lang=\"es-US\"\n\t\t\t\t\tclassName={resultLanguage === 'es-US' ? 'selected' : ''}\n\t\t\t\t>\n\t\t\t\t\tSpanish\n\t\t\t\t</LanguageItem>\n\t\t\t</LanguageList>\n\t\t</StyledBar>\n\t);\n}\n\nexport default LanguagesBar;\n","const useSpeechSynthesis = (\r\n\ttext: string,\r\n\tlanguage: string\r\n): [boolean, (onEnd: () => void) => void, () => void] => {\r\n\tconst isSupported: boolean = window.speechSynthesis !== undefined;\r\n\r\n\tconst textToSpeech = (onEnd: () => void) => {\r\n\t\tconst utterance: SpeechSynthesisUtterance =\r\n\t\t\tnew SpeechSynthesisUtterance(text);\r\n\t\tutterance.onend = onEnd;\r\n\t\tutterance.lang = language;\r\n\t\twindow.speechSynthesis.speak(utterance);\r\n\t};\r\n\r\n\tconst cancelSpeechSynthesis = () => window.speechSynthesis.cancel();\r\n\r\n\treturn [isSupported, textToSpeech, cancelSpeechSynthesis];\r\n};\r\n\r\nexport default useSpeechSynthesis;\r\n","import { Dispatch, SetStateAction } from 'react';\r\n\r\nconst useSpeechRecognition = (\r\n\tlanguage: string,\r\n\tsetText: Dispatch<SetStateAction<string>>\r\n): [boolean, (onEnd: () => void) => void, () => void] => {\r\n\tconst isSupported = window.SpeechRecognition !== undefined,\r\n\t\tisSupportedWithPrefix =\r\n\t\t\t(window as any).webkitSpeechRecognition !== undefined;\r\n\r\n\tlet speech = isSupported\r\n\t\t? new SpeechRecognition()\r\n\t\t: isSupportedWithPrefix\r\n\t\t? new (window as any).webkitSpeechRecognition()\r\n\t\t: {};\r\n\r\n\tconst onSpeak = (\r\n\t\t{ results }: SpeechRecognitionEvent,\r\n\t\tonEnd: () => void\r\n\t) => {\r\n\t\tconsole.log('on end');\r\n\t\tconsole.log(results);\r\n\t\tconst [result] = Array.from(results[0]),\r\n\t\t\t{ transcript } = result;\r\n\t\tconsole.log(transcript);\r\n\t\tsetText(transcript);\r\n\t\tonEnd();\r\n\t};\r\n\r\n\tconst startSpeechRecognition = (onEnd: () => void) => {\r\n\t\tspeech.lang = language;\r\n\t\tconsole.log(speech);\r\n\t\tspeech.start();\r\n\t\tspeech.addEventListener('result', (e: SpeechRecognitionEvent) =>\r\n\t\t\tonSpeak(e, onEnd)\r\n\t\t);\r\n\t};\r\n\r\n\tconst abortSpeechRecognition = () => speech.abort();\r\n\r\n\treturn [\r\n\t\tisSupported || isSupportedWithPrefix,\r\n\t\tstartSpeechRecognition,\r\n\t\tabortSpeechRecognition,\r\n\t];\r\n};\r\n\r\nexport default useSpeechRecognition;\r\n","import { css } from 'styled-components';\n\nexport const textBoxStyles = css`\n\tborder-radius: 2.5rem;\n\tbox-shadow: 0 0 5px 2px var(--color-bg-3);\n\theight: auto;\n\tpadding: 2rem 2rem 0;\n\tposition: relative;\n`;\n","import styled from 'styled-components';\nimport { textBoxStyles } from '../styles/mixins';\n\nconst TextBox = styled.div`\n\t${textBoxStyles};\n`;\n\nexport const Actions = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n`;\n\nexport const TextArea = styled.textarea`\n\tbackground: none;\n\tborder: none;\n\tcolor: var(--color-text);\n\tdisplay: block;\n\tfont-family: inherit;\n\tfont-size: 1.6rem;\n\tline-height: 1.6;\n\tmin-height: 17rem;\n\theight: auto;\n\tresize: none;\n\toverflow: hidden;\n\tpadding-bottom: 2rem;\n\tpadding-right: 1rem;\n\twidth: 100%;\n\t&:focus {\n\t\toutline: none;\n\t}\n`;\n\n// function calcHeight(scrollHeight: number): number {\n// \tconsole.log('scroll height:', scrollHeight);\n// \tif (!scrollHeight) return 170;\n// \t// Height / line height\n// \tconst lines = Math.ceil(scrollHeight / 25.6);\n// \t// min-height + lines x line-height + padding + border\n// \tconst newHeight = Math.ceil(lines * 25.6);\n// \tconsole.log(lines);\n// \treturn newHeight;\n// }\n\nexport default TextBox;\n","import styled from 'styled-components';\n\ninterface BtnIconProps {\n\tshow?: boolean;\n}\n\nconst BtnIcon = styled.button<BtnIconProps>`\n\tbackground: none;\n\tborder: none;\n\tcolor: inherit;\n\tcursor: pointer;\n\tdisplay: inline-block;\n\tmargin: 0;\n\tpadding: 1.2rem;\n\ttext-align: center;\n\topacity: ${({ show = true }) => (show ? '1' : '0')};\n\tvisibility: ${({ show = true }) => (show ? 'visible' : 'hidden')};\n\ttransition: 0.3s ease-out;\n`;\n\nexport default BtnIcon;\n","import { MouseEvent, ReactElement, useState } from 'react';\r\nimport { MdStop } from 'react-icons/md';\r\nimport BtnIcon from './BtnIcon';\r\n\r\ninterface BtnWithPlayStateProps {\r\n\ticon: ReactElement;\r\n\tlabel?: string;\r\n\ttitle?: string;\r\n\tshow?: boolean;\r\n\tonClick: (onEnd: () => void) => void;\r\n\tonCancel: () => void;\r\n}\r\n\r\nfunction BtnWithPlayState({\r\n\ticon,\r\n\tlabel,\r\n\ttitle,\r\n\tshow,\r\n\tonClick,\r\n\tonCancel,\r\n}: BtnWithPlayStateProps) {\r\n\tconst [isPlaying, setPlaying] = useState(false);\r\n\r\n\tconst handlePlay = (e: MouseEvent<HTMLButtonElement>) => {\r\n\t\tsetPlaying(!isPlaying);\r\n\t\tif (isPlaying) {\r\n\t\t\tonCancel();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Esto cambia el icono de detener por el default\r\n\t\tonClick(() => {\r\n\t\t\tsetPlaying(false);\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<BtnIcon\r\n\t\t\t\tonClick={handlePlay}\r\n\t\t\t\tshow={show}\r\n\t\t\t\taria-label={label}\r\n\t\t\t\tdata-title={title}\r\n\t\t\t>\r\n\t\t\t\t{isPlaying ? <MdStop size=\"24\" color=\"currentColor\" /> : icon}\r\n\t\t\t</BtnIcon>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default BtnWithPlayState;\r\n","import { ChangeEvent, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { MdClear, MdMic, MdVolumeUp } from 'react-icons/md';\r\nimport { TranslateBoxProps } from '../constants/languages';\r\n// import { SpeechContext } from '../context/SpeechContext';\r\n// import { textToSpeech } from '../helpers/speech';\r\nimport useSpeechSynthesis from '../hooks/useSpeechSynthesis';\r\nimport useSpeechRecognition from '../hooks/useSpeechRecognition';\r\nimport TextBox, { Actions, TextArea } from './TextBox';\r\nimport BtnIcon from './BtnIcon';\r\nimport BtnWithPlayState from './BtnWithPlayState';\r\n\r\nconst CharactersCounter = styled.span`\r\n\tmargin-left: auto;\r\n`;\r\n\r\nconst BtnClear = styled(BtnIcon)`\r\n\tpadding: 0.6rem;\r\n\tposition: absolute !important;\r\n\tright: 0;\r\n\ttop: 2rem;\r\n`;\r\n\r\nfunction SourceBox({ language }: TranslateBoxProps) {\r\n\tconst [text, setText] = useState('');\r\n\tconst charactersLimit = 2000;\r\n\r\n\tconst handleChange = ({\r\n\t\tcurrentTarget,\r\n\t}: ChangeEvent<HTMLTextAreaElement>) => {\r\n\t\tsetText(currentTarget.value.substring(0, charactersLimit));\r\n\t};\r\n\r\n\tconst clearText = () => setText('');\r\n\r\n\tconst [isSpeechSynthesisSupported, textToSpeech, cancelSpeechSynthesis] =\r\n\t\tuseSpeechSynthesis(text, language);\r\n\r\n\tconst [\r\n\t\tisSpeechRecognitionSupported,\r\n\t\tstartSpeechRecognition,\r\n\t\tabortSpeechRecognition,\r\n\t] = useSpeechRecognition(language, setText);\r\n\r\n\treturn (\r\n\t\t<TextBox>\r\n\t\t\t<BtnClear\r\n\t\t\t\tshow={text.length > 0}\r\n\t\t\t\taria-label=\"Clear source text\"\r\n\t\t\t\tdata-title=\"Clear source text\"\r\n\t\t\t\tdata-tooltip-pos=\"right\"\r\n\t\t\t\tonClick={clearText}\r\n\t\t\t>\r\n\t\t\t\t<MdClear size=\"24\" color=\"currentColor\" />\r\n\t\t\t</BtnClear>\r\n\t\t\t<TextArea\r\n\t\t\t\tmaxLength={charactersLimit}\r\n\t\t\t\tvalue={text}\r\n\t\t\t\tonChange={handleChange}\r\n\t\t\t/>\r\n\t\t\t<Actions>\r\n\t\t\t\t{isSpeechRecognitionSupported && (\r\n\t\t\t\t\t<BtnWithPlayState\r\n\t\t\t\t\t\ticon={<MdMic size=\"24\" color=\"currentColor\" />}\r\n\t\t\t\t\t\tlabel=\"Translate by voice\"\r\n\t\t\t\t\t\ttitle=\"Translate by voice\"\r\n\t\t\t\t\t\tonClick={startSpeechRecognition}\r\n\t\t\t\t\t\tonCancel={abortSpeechRecognition}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\r\n\t\t\t\t{isSpeechSynthesisSupported && (\r\n\t\t\t\t\t<BtnWithPlayState\r\n\t\t\t\t\t\ticon={<MdVolumeUp size=\"24\" color=\"currentColor\" />}\r\n\t\t\t\t\t\tlabel=\"Listen\"\r\n\t\t\t\t\t\tshow={text.length > 0}\r\n\t\t\t\t\t\ttitle=\"Listen\"\r\n\t\t\t\t\t\tonClick={textToSpeech}\r\n\t\t\t\t\t\tonCancel={cancelSpeechSynthesis}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t\t<CharactersCounter>\r\n\t\t\t\t\t{text.length} / {charactersLimit}\r\n\t\t\t\t</CharactersCounter>\r\n\t\t\t</Actions>\r\n\t\t</TextBox>\r\n\t);\r\n}\r\n\r\nexport default SourceBox;\r\n","import { useRef } from 'react';\r\nimport { MdContentCopy, MdVolumeUp } from 'react-icons/md';\r\nimport { TranslateBoxProps } from '../constants/languages';\r\nimport useSpeechSynthesis from '../hooks/useSpeechSynthesis';\r\nimport * as clipboard from '../helpers/clipboard';\r\nimport TextBox, { Actions, TextArea } from './TextBox';\r\nimport BtnIcon from './BtnIcon';\r\nimport BtnWithPlayState from './BtnWithPlayState';\r\n\r\nfunction ResultBox({ language }: TranslateBoxProps) {\r\n\tconst text: string =\r\n\t\t'Hola a todos como están yo me encuentro muy bien gracias';\r\n\r\n\tconst textAreaRef = useRef<HTMLTextAreaElement>(null!);\r\n\r\n\tconst [isSpeechSynthesisSupported, textToSpeech, cancelSpeechSynthesis] =\r\n\t\tuseSpeechSynthesis(text, language);\r\n\r\n\treturn (\r\n\t\t<TextBox>\r\n\t\t\t<TextArea ref={textAreaRef} defaultValue={text} readOnly={true} />\r\n\t\t\t<Actions>\r\n\t\t\t\t{isSpeechSynthesisSupported && (\r\n\t\t\t\t\t<BtnWithPlayState\r\n\t\t\t\t\t\ticon={<MdVolumeUp size=\"24\" color=\"currentColor\" />}\r\n\t\t\t\t\t\tlabel=\"Listen\"\r\n\t\t\t\t\t\tshow={text.length > 0}\r\n\t\t\t\t\t\ttitle=\"Listen\"\r\n\t\t\t\t\t\tonClick={textToSpeech}\r\n\t\t\t\t\t\tonCancel={cancelSpeechSynthesis}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t\t<BtnIcon\r\n\t\t\t\t\tshow={text.length > 0}\r\n\t\t\t\t\taria-label=\"Copy translation\"\r\n\t\t\t\t\tdata-title=\"Copy translation\"\r\n\t\t\t\t\tonClick={() => clipboard.copy(text, textAreaRef.current)}\r\n\t\t\t\t>\r\n\t\t\t\t\t<MdContentCopy size=\"24\" color=\"currentColor\" />\r\n\t\t\t\t</BtnIcon>\r\n\t\t\t</Actions>\r\n\t\t</TextBox>\r\n\t);\r\n}\r\n\r\nexport default ResultBox;\r\n","export const copy = (\r\n\ttext: string,\r\n\telement: HTMLInputElement | HTMLTextAreaElement\r\n): Promise<void> => {\r\n\tif (window.navigator.clipboard !== undefined) {\r\n\t\treturn window.navigator.clipboard.writeText(text);\r\n\t}\r\n\treturn new Promise((res) => {\r\n\t\telement.select();\r\n\t\twindow.document.execCommand('copy');\r\n\t\twindow.getSelection()?.removeAllRanges();\r\n\t\tres();\r\n\t});\r\n};\r\n","import { useState } from 'react';\nimport styled from 'styled-components';\nimport LanguageList from '../constants/languages';\nimport Wrapper from './Wrapper';\nimport LanguagesBar from './LanguagesBar';\nimport SourceBox from './SourceBox';\nimport ResultBox from './ResultBox';\n\nconst StyledTranslator = styled.main`\n\tmargin: 2rem 0;\n`;\n\nconst Grid = styled.div`\n\tdisplay: grid;\n\tgap: 2rem;\n\t@media (min-width: 56.25em) {\n\t\tgap: 0;\n\t\tgrid-template-columns: repeat(2, 1fr);\n\t}\n`;\n\nfunction Translator() {\n\tconst [sourceLanguage, setSourceLanguage] = useState<LanguageList>('en-US');\n\tconst [resultLanguage, setResultLanguage] = useState<LanguageList>('es-US');\n\n\tconst swapLanguages = (): void => {\n\t\tconst aux: LanguageList = sourceLanguage;\n\t\tsetSourceLanguage(resultLanguage);\n\t\tsetResultLanguage(aux);\n\t};\n\n\treturn (\n\t\t<StyledTranslator>\n\t\t\t<Wrapper>\n\t\t\t\t<Grid>\n\t\t\t\t\t<LanguagesBar\n\t\t\t\t\t\tsourceLanguage={sourceLanguage}\n\t\t\t\t\t\tresultLanguage={resultLanguage}\n\t\t\t\t\t\tswapLanguages={swapLanguages}\n\t\t\t\t\t\tsetSourceLanguage={setSourceLanguage}\n\t\t\t\t\t\tsetResultLanguage={setResultLanguage}\n\t\t\t\t\t/>\n\t\t\t\t\t<SourceBox language={sourceLanguage} />\n\t\t\t\t\t<ResultBox language={resultLanguage} />\n\t\t\t\t</Grid>\n\t\t\t</Wrapper>\n\t\t</StyledTranslator>\n\t);\n}\n\nexport default Translator;\n","import Header from '../components/Header';\nimport Translator from '../components/Translator';\n\nfunction HomePage() {\n\treturn (\n\t\t<div>\n\t\t\t<Header />\n\t\t\t<Translator />\n\t\t</div>\n\t);\n}\n\nexport default HomePage;\n","import { ThemeProvider } from './context/ThemeContext';\nimport { SpeechProvider } from './context/SpeechContext';\nimport GlobalStyles from './styles/globalStyles';\nimport HomePage from './pages/HomePage';\n\nfunction App() {\n\treturn (\n\t\t<ThemeProvider>\n\t\t\t<SpeechProvider>\n\t\t\t\t<GlobalStyles />\n\t\t\t\t<HomePage />\n\t\t\t</SpeechProvider>\n\t\t</ThemeProvider>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}