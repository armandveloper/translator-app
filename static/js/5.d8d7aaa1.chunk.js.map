{"version":3,"sources":["hooks/useOnline.ts","context/TranslateContext.tsx","hooks/useTheme.ts","context/ThemeContext.tsx","components/Switch.tsx","components/Wrapper.tsx","components/Header.tsx","components/LanguagesBar.tsx","hooks/useSpeechSynthesis.ts","hooks/useSpeechRecognition.ts","styles/mixins.ts","components/TextBox.tsx","components/BtnIcon.tsx","components/BtnWithPlayState.tsx","components/SourceBox.tsx","components/Toast.tsx","components/ResultBox.tsx","helpers/clipboard.ts","components/Alert.tsx","components/Translator.tsx","pages/HomePage.tsx"],"names":["useOnline","useState","window","navigator","onLine","isOnline","setOnline","useEffect","updateOnlineState","addEventListener","removeEventListener","TranslateContext","createContext","TranslateProvider","children","sourceText","setSourceText","resultText","setResultText","source","result","languageInfo","setLanguageInfo","hasLimitExceeded","setLimitExceeded","msgError","setError","apiKey","process","translate","useCallback","text","target","a","fetch","method","headers","body","JSON","stringify","q","res","status","json","data","translations","translatedText","console","error","timeoutID","useRef","clearTimeout","current","trim","setTimeout","substring","substr","Provider","value","clearText","setText","swapLanguages","aux","sourcetAux","useTheme","theme","setTheme","handleColorScheme","e","matches","lsTheme","localStorage","getItem","mql","matchMedia","setItem","document","className","ThemeContext","ThemeProvider","StyledSwitch","styled","label","checked","Switch","useContext","onChange","currentTarget","type","Wrapper","div","Title","h1","HeaderContent","Header","StyledBar","LanguageList","ul","LanguageItem","li","SwapLanguage","button","LanguagesBar","sourceLanguage","resultLanguage","handleSourceClick","event","language","dataset","lang","handleResultClick","onClick","data-lang","aria-label","data-title","color","size","useSpeechSynthesis","undefined","speechSynthesis","onEnd","utterance","SpeechSynthesisUtterance","onend","speak","cancel","useSpeechRecognition","isSupported","SpeechRecognition","isSupportedWithPrefix","webkitSpeechRecognition","speech","start","results","Array","from","transcript","onSpeak","abort","textBoxStyles","css","TextBox","Actions","handleAutoGrow","style","height","scrollHeight","TextArea","textarea","attrs","props","onInput","BtnIcon","show","BtnWithPlayState","icon","title","onCancel","isPlaying","setPlaying","CharactersCounter","span","BtnClear","SourceBox","isSpeechSynthesisSupported","textToSpeech","cancelSpeechSynthesis","isSpeechRecognitionSupported","startSpeechRecognition","abortSpeechRecognition","textAreaRef","length","data-tooltip-pos","Event","bubbles","dispatchEvent","maxLength","ref","rows","StyledToast","open","showToastAnimation","hideToastAnimation","Toast","onClose","shouldRender","setRender","timeout","onAnimationEnd","ResultBox","isToastOpen","setToastOpen","readOnly","placeholder","element","clipboard","writeText","Promise","select","execCommand","getSelection","removeAllRanges","then","colors","success","StyledAlert","severity","showAlertAnimation","hideAlertAnimation","AlertMessage","icons","Alert","role","StyledTranslator","main","Grid","Translator","HomePage"],"mappings":"2QAoBeA,EAlBG,WACjB,MAA8BC,mBAASC,OAAOC,UAAUC,QAAxD,mBAAOC,EAAP,KAAiBC,EAAjB,KAcA,OAZAC,qBAAU,WACT,IAAMC,EAAoB,kBAAMF,EAAUJ,OAAOC,UAAUC,SAK3D,OAHAF,OAAOO,iBAAiB,SAAUD,GAClCN,OAAOO,iBAAiB,UAAWD,GAE5B,WACNN,OAAOQ,oBAAoB,SAAUF,GACrCN,OAAOQ,oBAAoB,UAAWF,MAErC,IAEIH,G,OCSKM,EAAmBC,wBAAc,IAEjCC,EAAoB,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,SACnC,EAAoCb,mBAAS,IAA7C,mBAAOc,EAAP,KAAmBC,EAAnB,KAEA,EAAoCf,mBAAS,IAA7C,mBAAOgB,EAAP,KAAmBC,EAAnB,KAEA,EAAwCjB,mBAAuB,CAC9DkB,OAAQ,QACRC,OAAQ,UAFT,mBAAOC,EAAP,KAAqBC,EAArB,KAKA,EAA6CrB,oBAAS,GAAtD,mBAAOsB,EAAP,KAAyBC,EAAzB,KAEA,EAA6BvB,mBAAS,IAAtC,mBAAOwB,EAAP,KAAiBC,EAAjB,KAeCC,EAASC,qDAEJC,EAAYC,sBAAW,uCAC5B,WAAOC,EAAcZ,EAAgBa,GAArC,iBAAAC,EAAA,+EAEoBC,MANT,+DAMoB,CAC5BC,OAAQ,OACRC,QAAS,CACR,eAAgB,mBAChB,iBAAkBT,EAClB,kBAAmB,kCAEpBU,KAAMC,KAAKC,UAAU,CACpBC,EAAGT,EACHZ,SACAa,aAZJ,UAeqB,OAbbS,EAFR,QAeUC,OAfV,uBAgBGlB,GAAiB,GAhBpB,6BAmBqB,MAAfiB,EAAIC,OAnBV,wBAoBGhB,EAAS,wBApBZ,4CAwB2Ce,EAAIE,OAxB/C,QAwBQvB,EAxBR,OAyBEF,EAAcE,EAAOwB,KAAKC,aAAaC,gBAzBzC,kDA2BEC,QAAQC,MAAR,MACAtB,EAAS,wBA5BX,0DAD4B,0DAgC5B,CAACC,IAGFpB,qBAAU,WACU,KAAfQ,GAAmBG,EAAc,MACnC,CAACH,EAAYc,IAEhB,IAAMoB,EAAYC,iBAAe,MAE3B7C,EAAWL,IAgCjB,OA7BAO,qBAAU,WAERmB,EADGH,EACM,gDACEA,EAEAlB,EAKF,GAHR,qGAHQ,MAQR,CAACA,EAAUkB,IAGdhB,qBAAU,WAETL,OAAOiD,aAAaF,EAAUG,UAC1B7B,GAAqBlB,GAAaU,EAAWsC,SAEjDJ,EAAUG,QAAUlD,OAAOoD,YAAW,WACrCzB,EACCd,EACAM,EAAaF,OAAOoC,UAAU,EAAG,GACjClC,EAAaD,OAAOoC,OAAO,EAAG,MAE7B,QACD,CAACjC,EAAkBlB,EAAUU,EAAYc,EAAWR,IAGtD,cAACV,EAAiB8C,SAAlB,CACCC,MAAO,CACNrC,eACAI,WACAR,aACAF,aACA4C,UArFe,kBAAM3C,EAAc,KAsFnCM,kBACAsC,QAAS5C,EACT6C,cAlGmB,WACrB,IAAMC,EAAoBzC,EAAaF,OACtC4C,EAAqBhD,EAEtBO,EAAgB,CAAEH,OAAQE,EAAaD,OAAQA,OAAQ0C,IACvD9C,EAAcC,GAEdC,EAAc6C,IA4FZlC,aAVF,SAaEf,M,qJCzGWkD,EAnCE,WAChB,MAA0B/D,mBAAmB,QAA7C,mBAAOgE,EAAP,KAAcC,EAAd,KA+BA,OA7BA3D,qBAAU,WACT,IAAM4D,EAAoB,SAACC,GAC1BF,EAASE,EAAEC,QAAU,QAAU,SAG1BC,EAAUpE,OAAOqE,aAAaC,QAAQ,wBAE5C,GAAgB,UAAZF,EAAJ,CAIA,IAAMG,EAAsBvE,OAAOwE,WAClC,iCASD,OANID,EAAIJ,SACPH,EAAS,SAGVO,EAAIhE,iBAAiB,SAAU0D,GAExB,kBAAMM,EAAI/D,oBAAoB,SAAUyD,IAb9CD,EAASI,KAcR,IAEH/D,qBAAU,WACTL,OAAOqE,aAAaI,QAAQ,uBAAwBV,GACpDW,SAASvC,KAAKwC,UAAYZ,IACxB,CAACA,IAEG,CAACA,EAAOC,I,OC3BHY,EAAelE,wBAAc,IAE7BmE,EAAgB,SAAC,GAA2C,IAAzCjE,EAAwC,EAAxCA,SAC/B,EAA0BkD,IAA1B,mBAAOC,EAAP,KAAcC,EAAd,KAEA,OACC,cAACY,EAAarB,SAAd,CACCC,MAAO,CACNO,QACAC,YAHF,SAMEpD,M,iFCbEkE,EAAeC,IAAOC,MAAV,2eACG,qBAAGC,QACZ,uBAAyB,aAqCtBC,I,MAAAA,EAff,YAA2C,IAAzBD,EAAwB,EAAxBA,QACTjB,EAAamB,qBAAWP,gBAAxBZ,SAMR,OACC,eAACc,EAAD,CAAcG,QAASA,EAAvB,UACC,uBAAOG,SANY,SAAClB,GACrBF,EAASE,EAAEmB,cAAcJ,QAAU,OAAS,UAKZK,KAAK,WAAWL,QAASA,IACxD,sBAAMN,UAAU,qBCjCJY,EAPCR,IAAOS,IAAV,yGCIPC,EAAQV,IAAOW,GAAV,yFAMLC,EAAgBZ,IAAOS,IAAV,yGAqBJI,I,QAAAA,EAff,WACC,IAAQ7B,EAAUoB,qBAAWP,gBAArBb,MAER,OACC,iCACC,cAAC,EAAD,UACC,eAAC4B,EAAD,WACC,cAACF,EAAD,wBACA,cAAC,EAAD,CAAQR,QAAmB,SAAVlB,Y,gBCdhB8B,EAAYd,IAAOS,IAAV,yLASTM,EAAef,IAAOgB,GAAV,qKAWZC,EAAejB,IAAOkB,GAAV,ilBA6BZC,EAAenB,IAAOoB,OAAV,6PAoFHC,I,UAAAA,EAtEf,YAKuB,IAJtBC,EAIqB,EAJrBA,eACAC,EAGqB,EAHrBA,eACA3C,EAEqB,EAFrBA,cACAvC,EACqB,EADrBA,gBAEMmF,EAAoB,SAACC,GAC1B,IAAMC,EAAWD,EAAMnB,cAAcqB,QAAQC,KACzCF,IAAaH,EAIjBlF,EAAgB,CAAEF,OAAQoF,EAAgBrF,OAAQwF,IAHjD9C,KAMIiD,EAAoB,SAACJ,GAC1B,IAAMC,EAAWD,EAAMnB,cAAcqB,QAAQC,KACzCF,IAAaJ,EAIjBjF,EAAgB,CAAEH,OAAQoF,EAAgBnF,OAAQuF,IAHjD9C,KAMF,OACC,eAACkC,EAAD,WACC,eAACC,EAAD,WAEC,cAACE,EAAD,CACCa,QAASN,EACTO,YAAU,QACVnC,UAA8B,UAAnB0B,EAA6B,WAAa,GAHtD,qBAOA,cAACL,EAAD,CACCa,QAASN,EACTO,YAAU,QACVnC,UAA8B,UAAnB0B,EAA6B,WAAa,GAHtD,wBAQD,cAACH,EAAD,CACCa,aAAW,gBACXC,aAAW,gBACXH,QAASlD,EAHV,SAKC,cAAC,IAAD,CAAasD,MAAM,eAAeC,KAAK,SAExC,eAACpB,EAAD,WACC,cAACE,EAAD,CACCa,QAASD,EACTE,YAAU,QACVnC,UAA8B,UAAnB2B,EAA6B,WAAa,GAHtD,qBAOA,cAACN,EAAD,CACCa,QAASD,EACTE,YAAU,QACVnC,UAA8B,UAAnB2B,EAA6B,WAAa,GAHtD,4B,QClHWa,EAnBY,SAC1BtF,EACA4E,GAcA,MAAO,MAZiDW,IAA3BpH,OAAOqH,gBAEf,SAACC,GACrB,IAAMC,EACL,IAAIC,yBAAyB3F,GAC9B0F,EAAUE,MAAQH,EAClBC,EAAUZ,KAAOF,EACjBzG,OAAOqH,gBAAgBK,MAAMH,IAGA,kBAAMvH,OAAOqH,gBAAgBM,YC6B7CC,EAzCc,SAC5BnB,EACA/C,GAEA,IAAMmE,OAA2CT,IAA7BpH,OAAO8H,kBAC1BC,OAC6CX,IAA3CpH,OAAegI,wBAEdC,EAASJ,EACV,IAAIC,kBACJC,EACA,IAAK/H,OAAegI,wBACpB,GAsBH,MAAO,CACNH,GAAeE,EAXe,SAACT,GAC/BW,EAAOtB,KAAOF,EACdwB,EAAOC,QACPD,EAAO1H,iBAAiB,UAAU,SAAC2D,GAAD,OAbnB,SAAC,EAEhBoD,GACK,IAFHa,EAEE,EAFFA,QAGF,EAAiBC,MAAMC,KAAKF,EAAQ,IACjCG,EADH,oBACGA,WACH5E,EAAQ4E,GACRhB,IAOCiB,CAAQrE,EAAGoD,OAIkB,kBAAMW,EAAOO,W,QChChCC,EAAgBC,YAAH,qKCEpBC,EAAU5D,IAAOS,IAAV,mCACViD,GAGUG,EAAU7D,IAAOS,IAAV,sEAKdqD,EAAiB,SAAC,GAAuD,IAArDxD,EAAoD,EAApDA,cACzBA,EAAcyD,MAAMC,OAAS,OAC7B1D,EAAcyD,MAAMC,OAApB,UAAgC1D,EAAc2D,aAA9C,OAGYC,EAAWlE,IAAOmE,SAASC,OAAM,SAACC,GAAD,mBAAC,eAC3CA,GAD0C,IAE7CC,QAASR,MAFc9D,CAAH,ycA4BN4D,IC1BAW,EAdCvE,IAAOoB,OAAV,+PASD,oBAAGoD,KAAH,qBAA6B,IAAM,OAChC,oBAAGA,KAAH,qBAA6B,UAAY,YCiCzCC,I,IAAAA,EApCf,YAO2B,IAN1BC,EAMyB,EANzBA,KACAzE,EAKyB,EALzBA,MACA0E,EAIyB,EAJzBA,MACAH,EAGyB,EAHzBA,KACA1C,EAEyB,EAFzBA,QACA8C,EACyB,EADzBA,SAEA,EAAgC5J,oBAAS,GAAzC,mBAAO6J,EAAP,KAAkBC,EAAlB,KAcA,OACC,8BACC,cAAC,EAAD,CACChD,QAfgB,SAAC3C,GACnB2F,GAAYD,GACRA,EACHD,IAID9C,GAAQ,WACPgD,GAAW,OAQVN,KAAMA,EACNxC,aAAY/B,EACZgC,aAAY0C,EAJb,SAMEE,EAAY,cAAC,IAAD,CAAQ1C,KAAK,KAAKD,MAAM,iBAAoBwC,OChCvDK,EAAoB/E,IAAOgF,KAAV,kDAIjBC,EAAWjF,YAAOuE,EAAPvE,CAAH,6GAwFCkF,I,EAAAA,EAjFf,YAAqD,IAAhCxD,EAA+B,EAA/BA,SAGpB,EAIItB,qBAAW1E,oBAHFoB,EADb,EACChB,WACA4C,EAFD,EAECA,UACAC,EAHD,EAGCA,QASD,EACCyD,EAAmBtF,EAAM4E,GAD1B,mBAAOyD,EAAP,KAAmCC,EAAnC,KAAiDC,EAAjD,KAGA,EAIIxC,EAAqBnB,EAAU/C,GAJnC,mBACC2G,EADD,KAECC,EAFD,KAGCC,EAHD,KAMMC,EAAcxH,iBAA4B,MAShD,OACC,eAAC,EAAD,WACC,cAACgH,EAAD,CACCT,KAAM1H,EAAK4I,OAAS,EACpB1D,aAAW,oBACXC,aAAW,oBACX0D,mBAAiB,QACjB7D,QAdiB,WACnB,IAAML,EAAQ,IAAImE,MAAM,QAAS,CAAEC,SAAS,IAC5CJ,EAAYtH,QAAQM,MAAQ,GAC5BgH,EAAYtH,QAAQ2H,cAAcrE,GAClC/C,KAKC,SAOC,cAAC,IAAD,CAASyD,KAAK,KAAKD,MAAM,mBAE1B,cAACgC,EAAD,CACClC,aAAW,wBACX+D,UA7CqB,IA8CrBC,IAAKP,EACLQ,KAAM,EACNxH,MAAO3B,EACPuD,SAzCkB,SAAC,GAEmB,IADxCC,EACuC,EADvCA,cAEA3B,EAAQ2B,EAAc7B,MAAMH,UAAU,EAXf,SAmDtB,eAACuF,EAAD,WACEyB,GACA,cAAC,EAAD,CACCZ,KAAM,cAAC,IAAD,CAAOvC,KAAK,KAAKD,MAAM,iBAC7BjC,MAAM,qBACN0E,MAAM,qBACN7C,QAASyD,EACTX,SAAUY,IAIXL,GACA,cAAC,EAAD,CACCT,KAAM,cAAC,IAAD,CAAYvC,KAAK,KAAKD,MAAM,iBAClCjC,MAAM,SACNuE,KAAM1H,EAAK4I,OAAS,EACpBf,MAAM,SACN7C,QAASsD,EACTR,SAAUS,IAGZ,eAACN,EAAD,WACEjI,EAAK4I,OADP,MAxEqB,c,OCJnBQ,EAAclG,IAAOS,IAAV,gWAcH,qBAAG0F,KAAmBC,IAAqBC,OAmC1CC,OA/Bf,YAAyD,IAAxCzK,EAAuC,EAAvCA,SAAUsK,EAA6B,EAA7BA,KAAMI,EAAuB,EAAvBA,QAChC,EAAkCvL,mBAASmL,GAA3C,mBAAOK,EAAP,KAAqBC,EAArB,KAqBA,OAnBAnL,qBAAU,WACL6K,GAAMM,GAAU,KAClB,CAACN,IAEJ7K,qBAAU,WACT,GAAI6K,EAAM,CACT,IAAMO,EAAkBzL,OAAOoD,YAC9B,kBAAMkI,GAAWA,GAAQ,KACzB,KAGD,OAAO,kBAAMtL,OAAOiD,aAAawI,OAEhC,CAACP,EAAMI,IAMLC,EAGJ,cAACN,EAAD,CAAaS,eAPa,WACrBR,GAAMM,GAAU,IAM4BN,KAAMA,EAAvD,SACEtK,IAJuB,MCSZ+K,I,MAAAA,GAzDf,YAAqD,IAAhClF,EAA+B,EAA/BA,SACpB,EAAoC1G,oBAAS,GAA7C,mBAAO6L,EAAP,KAAoBC,EAApB,KAEQ9K,EAAeoE,qBAAW1E,oBAA1BM,WAEFyJ,EAAcxH,iBAA4B,MAEhD,EACCmE,EAAmBpG,EAAY0F,GADhC,mBAAOyD,EAAP,KAAmCC,EAAnC,KAAiDC,EAAjD,KAcA,OALA/J,qBAAU,WACTmK,EAAYtH,QAAQ4F,MAAMC,OAAS,OACnCyB,EAAYtH,QAAQ4F,MAAMC,OAA1B,UAAsCyB,EAAYtH,QAAQ8F,aAA1D,QACE,CAACjI,IAGH,eAAC,EAAD,WACC,cAAC,GAAD,CAAOmK,KAAMU,EAAaN,QAASO,EAAnC,gCAGA,cAAC5C,EAAD,CACC8B,IAAKP,EACLhH,MAAOzC,EACP+K,UAAU,EACVC,YAAY,cACZhF,aAAW,gBAEZ,eAAC6B,EAAD,WACEsB,GACA,cAAC,EAAD,CACCT,KAAM,cAAC,IAAD,CAAYvC,KAAK,KAAKD,MAAM,iBAClCjC,MAAM,SACNuE,KAAMxI,EAAW0J,OAAS,EAC1Bf,MAAM,SACN7C,QAASsD,EACTR,SAAUS,IAGZ,cAAC,EAAD,CACCb,KAAMxI,EAAW0J,OAAS,EAC1B1D,aAAW,mBACXC,aAAW,mBACXH,QAtCe,WCrBA,IACnBhF,EACAmK,GADAnK,EDsBQd,ECrBRiL,EDqBoBxB,EAAYtH,aCnBGkE,IAA/BpH,OAAOC,UAAUgM,UACbjM,OAAOC,UAAUgM,UAAUC,UAAUrK,GAEtC,IAAIsK,SAAQ,SAAC5J,GAAS,IAAD,EAC3ByJ,EAAQI,SACRpM,OAAO0E,SAAS2H,YAAY,QAC5B,UAAArM,OAAOsM,sBAAP,SAAuBC,kBACvBhK,QDaEiK,MAAK,kBAAMX,GAAa,OA+BxB,SAMC,cAAC,IAAD,CAAe3E,KAAK,KAAKD,MAAM,0BE9C9BwF,GAAS,CACdC,QAAS,CAAC,uBAAwB,2BAClC5J,MAAO,CAAC,qBAAsB,0BAGzB6J,GAAc5H,IAAOS,IAAV,8WAEP,gBAAGoH,EAAH,EAAGA,SAAH,OAAkBH,GAAOG,GAAU,MACxB,gBAAGA,EAAH,EAAGA,SAAH,OAAkBH,GAAOG,GAAU,MAa1C,qBAAGrD,KAAmBsD,IAAqBC,OAInDC,GAAehI,IAAOgF,KAAV,oDAIZiD,GAAQ,CACbN,QAAS,cAAC,IAAD,CAAexF,KAAK,KAAKD,MAAM,iBACxCnE,MAAO,cAAC,IAAD,CAAgBoE,KAAK,KAAKD,MAAM,kBAkCzBgG,I,MAAAA,GA/Bf,YAKgB,IAJfrM,EAIc,EAJdA,SACA6I,EAGc,EAHdA,KAGc,IAFdmD,gBAEc,MAFH,UAEG,MADdrD,YACc,SACd,EAAkCxJ,mBAASwJ,GAA3C,mBAAOgC,EAAP,KAAqBC,EAArB,KAUA,OARAnL,qBAAU,WACLkJ,GAAMiC,GAAU,KAClB,CAACjC,IAMCgC,EAGJ,eAACoB,GAAD,CACCjB,eARyB,WACrBnC,GAAMiC,GAAU,IAQpB0B,KAAK,QACLN,SAAUA,EACVrD,KAAMA,EAJP,UAMEE,GAAcuD,GAAMJ,GACrB,cAACG,GAAD,UAAenM,OAVS,MCxDrBuM,GAAmBpI,IAAOqI,KAAV,iDAIhBC,GAAOtI,IAAOS,IAAV,oLAmCK8H,OAzBf,WACC,MACCnI,qBAAW1E,oBADJU,EAAR,EAAQA,aAAcI,EAAtB,EAAsBA,SAAUoC,EAAhC,EAAgCA,cAAevC,EAA/C,EAA+CA,gBAG/C,OACC,cAAC+L,GAAD,UACC,cAAC,EAAD,UACC,eAACE,GAAD,WACC,cAAC,GAAD,CAAOT,SAAS,QAAQrD,KAAmB,KAAbhI,EAA9B,SACEA,IAEF,cAAC,EAAD,CACC8E,eAAgBlF,EAAaF,OAC7BqF,eAAgBnF,EAAaD,OAC7ByC,cAAeA,EACfvC,gBAAiBA,IAElB,cAAC,EAAD,CAAWqF,SAAUtF,EAAaF,SAClC,cAAC,GAAD,CAAWwF,SAAUtF,EAAaD,iBC7BxBqM,UATf,WACC,OACC,gCACC,cAAC,EAAD,IACA,cAAC,GAAD","file":"static/js/5.d8d7aaa1.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nconst useOnline = (): boolean => {\r\n\tconst [isOnline, setOnline] = useState(window.navigator.onLine);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst updateOnlineState = () => setOnline(window.navigator.onLine);\r\n\r\n\t\twindow.addEventListener('online', updateOnlineState);\r\n\t\twindow.addEventListener('offline', updateOnlineState);\r\n\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener('online', updateOnlineState);\r\n\t\t\twindow.removeEventListener('offline', updateOnlineState);\r\n\t\t};\r\n\t}, []);\r\n\r\n\treturn isOnline;\r\n};\r\n\r\nexport default useOnline;\r\n","import {\r\n\tcreateContext,\r\n\tDispatch,\r\n\tReactNode,\r\n\tSetStateAction,\r\n\tuseCallback,\r\n\tuseEffect,\r\n\tuseRef,\r\n\tuseState,\r\n} from 'react';\r\nimport LanguageList, { LanguageInfo } from '../constants/languages';\r\nimport { ITranslateResponse } from '../interfaces/translate.interface';\r\nimport useOnline from '../hooks/useOnline';\r\n\r\ninterface TranslateContextInt {\r\n\tlanguageInfo: LanguageInfo;\r\n\tmsgError: string;\r\n\tresultText: string;\r\n\tsourceText: string;\r\n\tclearText: () => void;\r\n\tsetLanguageInfo: Dispatch<SetStateAction<LanguageInfo>>;\r\n\tsetText: Dispatch<SetStateAction<string>>;\r\n\tswapLanguages: () => void;\r\n\ttranslate: (text: string, source: string, target: string) => Promise<void>;\r\n}\r\n\r\nexport const TranslateContext = createContext({} as TranslateContextInt);\r\n\r\nexport const TranslateProvider = ({ children }: { children: ReactNode }) => {\r\n\tconst [sourceText, setSourceText] = useState('');\r\n\r\n\tconst [resultText, setResultText] = useState('');\r\n\r\n\tconst [languageInfo, setLanguageInfo] = useState<LanguageInfo>({\r\n\t\tsource: 'en-US',\r\n\t\tresult: 'es-US',\r\n\t});\r\n\r\n\tconst [hasLimitExceeded, setLimitExceeded] = useState(false);\r\n\r\n\tconst [msgError, setError] = useState('');\r\n\r\n\tconst swapLanguages = (): void => {\r\n\t\tconst aux: LanguageList = languageInfo.source,\r\n\t\t\tsourcetAux: string = sourceText;\r\n\r\n\t\tsetLanguageInfo({ source: languageInfo.result, result: aux });\r\n\t\tsetSourceText(resultText);\r\n\t\t// Eliminar al agregar API\r\n\t\tsetResultText(sourcetAux);\r\n\t};\r\n\r\n\tconst clearText = () => setSourceText('');\r\n\r\n\tconst url = 'https://deep-translate1.p.rapidapi.com/language/translate/v2',\r\n\t\tapiKey = process.env.REACT_APP_API_KEY || '';\r\n\r\n\tconst translate = useCallback(\r\n\t\tasync (text: string, source: string, target: string): Promise<void> => {\r\n\t\t\ttry {\r\n\t\t\t\tconst res = await fetch(url, {\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t\t'x-rapidapi-key': apiKey,\r\n\t\t\t\t\t\t'x-rapidapi-host': 'deep-translate1.p.rapidapi.com',\r\n\t\t\t\t\t},\r\n\t\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\t\tq: text,\r\n\t\t\t\t\t\tsource,\r\n\t\t\t\t\t\ttarget,\r\n\t\t\t\t\t}),\r\n\t\t\t\t});\r\n\t\t\t\tif (res.status === 429) {\r\n\t\t\t\t\tsetLimitExceeded(true);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (res.status !== 200) {\r\n\t\t\t\t\tsetError('Something Went Wrong');\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst result: ITranslateResponse = await res.json();\r\n\t\t\t\tsetResultText(result.data.translations.translatedText);\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.error(err);\r\n\t\t\t\tsetError('Something Went Wrong');\r\n\t\t\t}\r\n\t\t},\r\n\t\t[apiKey]\r\n\t);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (sourceText === '') setResultText('');\r\n\t}, [sourceText, translate]);\r\n\r\n\tconst timeoutID = useRef<number>(null!);\r\n\r\n\tconst isOnline = useOnline();\r\n\r\n\t// Mensajes de error\r\n\tuseEffect(() => {\r\n\t\tif (hasLimitExceeded) {\r\n\t\t\tsetError('You have exceeded the allowed character limit');\r\n\t\t} else if (!hasLimitExceeded) {\r\n\t\t\tsetError('');\r\n\t\t} else if (!isOnline) {\r\n\t\t\tsetError(\r\n\t\t\t\t'There seems to be a problem with the Internet connection. Translator functionality may be limited.'\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tsetError('');\r\n\t\t}\r\n\t}, [isOnline, hasLimitExceeded]);\r\n\r\n\t// Debouncer\r\n\tuseEffect(() => {\r\n\t\t// Limpia el timeout anterior\r\n\t\twindow.clearTimeout(timeoutID.current);\r\n\t\tif (hasLimitExceeded || !isOnline || !sourceText.trim()) return;\r\n\t\t// Si hay un término de mínimo 3 caracteres hace la llamada al api\r\n\t\ttimeoutID.current = window.setTimeout(() => {\r\n\t\t\ttranslate(\r\n\t\t\t\tsourceText,\r\n\t\t\t\tlanguageInfo.source.substring(0, 2),\r\n\t\t\t\tlanguageInfo.result.substr(0, 2)\r\n\t\t\t);\r\n\t\t}, 500);\r\n\t}, [hasLimitExceeded, isOnline, sourceText, translate, languageInfo]);\r\n\r\n\treturn (\r\n\t\t<TranslateContext.Provider\r\n\t\t\tvalue={{\r\n\t\t\t\tlanguageInfo,\r\n\t\t\t\tmsgError,\r\n\t\t\t\tresultText,\r\n\t\t\t\tsourceText,\r\n\t\t\t\tclearText,\r\n\t\t\t\tsetLanguageInfo,\r\n\t\t\t\tsetText: setSourceText,\r\n\t\t\t\tswapLanguages,\r\n\t\t\t\ttranslate,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{children}\r\n\t\t</TranslateContext.Provider>\r\n\t);\r\n};\r\n","import { Dispatch, SetStateAction, useEffect, useState } from 'react';\n\ntype AppTheme = 'light' | 'dark';\n\nconst useTheme = (): [AppTheme, Dispatch<SetStateAction<AppTheme>>] => {\n\tconst [theme, setTheme] = useState<AppTheme>('dark');\n\n\tuseEffect(() => {\n\t\tconst handleColorScheme = (e: MediaQueryListEvent) => {\n\t\t\tsetTheme(e.matches ? 'light' : 'dark');\n\t\t};\n\n\t\tconst lsTheme = window.localStorage.getItem('translator-app:theme');\n\n\t\tif (lsTheme === 'light') {\n\t\t\tsetTheme(lsTheme);\n\t\t\treturn;\n\t\t}\n\t\tconst mql: MediaQueryList = window.matchMedia(\n\t\t\t'(prefers-color-scheme: light)'\n\t\t);\n\n\t\tif (mql.matches) {\n\t\t\tsetTheme('light');\n\t\t}\n\n\t\tmql.addEventListener('change', handleColorScheme);\n\n\t\treturn () => mql.removeEventListener('change', handleColorScheme);\n\t}, []);\n\n\tuseEffect(() => {\n\t\twindow.localStorage.setItem('translator-app:theme', theme);\n\t\tdocument.body.className = theme;\n\t}, [theme]);\n\n\treturn [theme, setTheme];\n};\n\nexport default useTheme;\n","import { createContext, Dispatch, ReactNode, SetStateAction } from 'react';\nimport AppTheme from '../constants/theme';\nimport useTheme from '../hooks/useTheme';\n\ninterface ThemeContextInt {\n\ttheme: AppTheme;\n\tsetTheme: Dispatch<SetStateAction<AppTheme>>;\n}\n\nexport const ThemeContext = createContext({} as ThemeContextInt);\n\nexport const ThemeProvider = ({ children }: { children: ReactNode }) => {\n\tconst [theme, setTheme] = useTheme();\n\n\treturn (\n\t\t<ThemeContext.Provider\n\t\t\tvalue={{\n\t\t\t\ttheme,\n\t\t\t\tsetTheme,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</ThemeContext.Provider>\n\t);\n};\n","import { ChangeEvent, useContext } from 'react';\r\nimport styled from 'styled-components';\r\nimport { ThemeContext } from '../context/ThemeContext';\r\n\r\ninterface SwitchProps {\r\n\tchecked: boolean;\r\n}\r\n\r\nconst StyledSwitch = styled.label<SwitchProps>`\r\n\tbackground-color: ${({ checked }) =>\r\n\t\tchecked ? 'var(--color-primary)' : '#4d4d4d'};\r\n\tborder-radius: 2.5rem;\r\n\twidth: 6rem;\r\n\theight: 2.5rem;\r\n\tpadding: 0.2rem;\r\n\ttransition: 0.3s ease;\r\n\t.switch-thumb {\r\n\t\tbackground-color: #fff;\r\n\t\tborder-radius: 50%;\r\n\t\tdisplay: block;\r\n\t\theight: 2rem;\r\n\t\twidth: 2rem;\r\n\t\ttransition: transform 0.3s ease-in;\r\n\t}\r\n\tinput[type='checkbox'] {\r\n\t\tdisplay: none;\r\n\t}\r\n\tinput[type='checkbox']:checked ~ .switch-thumb {\r\n\t\ttransform: translate3d(3.6rem, 0, 0);\r\n\t}\r\n`;\r\n\r\nfunction Switch({ checked }: SwitchProps) {\r\n\tconst { setTheme } = useContext(ThemeContext);\r\n\r\n\tconst handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetTheme(e.currentTarget.checked ? 'dark' : 'light');\r\n\t};\r\n\r\n\treturn (\r\n\t\t<StyledSwitch checked={checked}>\r\n\t\t\t<input onChange={handleChange} type=\"checkbox\" checked={checked} />\r\n\t\t\t<span className=\"switch-thumb\" />\r\n\t\t</StyledSwitch>\r\n\t);\r\n}\r\n\r\nexport default Switch;\r\n","import styled from 'styled-components';\n\nconst Wrapper = styled.div`\n\tmax-width: 124rem;\n\tmargin: 0 auto;\n\tpadding: 0 2rem;\n\twidth: 100%;\n`;\n\nexport default Wrapper;\n","import { useContext } from 'react';\r\nimport styled from 'styled-components';\r\nimport { ThemeContext } from '../context/ThemeContext';\r\nimport Switch from './Switch';\r\nimport Wrapper from './Wrapper';\r\n\r\nconst Title = styled.h1`\r\n\tcursor: default;\r\n\tfont-size: 3rem;\r\n\tfont-weight: 500;\r\n`;\r\n\r\nconst HeaderContent = styled.div`\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: space-between;\r\n`;\r\n\r\nfunction Header() {\r\n\tconst { theme } = useContext(ThemeContext);\r\n\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<Wrapper>\r\n\t\t\t\t<HeaderContent>\r\n\t\t\t\t\t<Title>Translate</Title>\r\n\t\t\t\t\t<Switch checked={theme === 'dark'} />\r\n\t\t\t\t</HeaderContent>\r\n\t\t\t</Wrapper>\r\n\t\t</header>\r\n\t);\r\n}\r\n\r\nexport default Header;\r\n","import { Dispatch, MouseEvent, SetStateAction } from 'react';\r\nimport styled from 'styled-components';\r\nimport { MdSwapHoriz } from 'react-icons/md';\r\nimport Languages, { LanguageInfo } from '../constants/languages';\r\n\r\ninterface LanguagesBarProps {\r\n\tsourceLanguage: Languages;\r\n\tresultLanguage: Languages;\r\n\tswapLanguages(): void;\r\n\tsetLanguageInfo: Dispatch<SetStateAction<LanguageInfo>>;\r\n}\r\n\r\nconst StyledBar = styled.div`\r\n\tgrid-column: 1 / -1;\r\n\tdisplay: flex;\r\n\tmargin-bottom: 3rem;\r\n\tpadding: 0 2rem;\r\n\tbox-shadow: 0 0 5px 2px var(--color-bg-3);\r\n\tborder-radius: 10rem;\r\n`;\r\n\r\nconst LanguageList = styled.ul`\r\n\tflex: 1;\r\n\tlist-style: none;\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tdisplay: flex;\r\n\t&:last-of-type {\r\n\t\tjustify-content: flex-end;\r\n\t}\r\n`;\r\n\r\nconst LanguageItem = styled.li`\r\n\tborder-bottom: 3px solid transparent;\r\n\tcolor: var(--color-primary);\r\n\tcursor: pointer;\r\n\tpadding: 0.8rem 1.5rem;\r\n\ttext-align: center;\r\n\tuser-select: none;\r\n\ttransition: 0.3s ease;\r\n\tdisplay: inline-flex;\r\n\talign-items: center;\r\n\t&:hover,\r\n\t&:focus {\r\n\t\tbackground-color: var(--color-bg-3);\r\n\t}\r\n\r\n\t&:not(.selected) {\r\n\t\tdisplay: none;\r\n\t}\r\n\t@media (min-width: 56.25em) {\r\n\t\tcolor: var(--color-text);\r\n\t\t&.selected {\r\n\t\t\tborder-bottom-color: var(--color-primary);\r\n\t\t}\r\n\t\t&:not(.selected) {\r\n\t\t\tdisplay: inline-flex;\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst SwapLanguage = styled.button`\r\n\tbackground-color: var(--color-primary);\r\n\tborder: none;\r\n\tborder-radius: 50%;\r\n\tcolor: #fff;\r\n\tcursor: pointer;\r\n\theight: 5rem;\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\twidth: 5rem;\r\n\t/* position: relative;\r\n\ttop: -2rem; */\r\n`;\r\n\r\nfunction LanguagesBar({\r\n\tsourceLanguage,\r\n\tresultLanguage,\r\n\tswapLanguages,\r\n\tsetLanguageInfo,\r\n}: LanguagesBarProps) {\r\n\tconst handleSourceClick = (event: MouseEvent<HTMLLIElement>) => {\r\n\t\tconst language = event.currentTarget.dataset.lang as Languages;\r\n\t\tif (language === resultLanguage) {\r\n\t\t\tswapLanguages();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsetLanguageInfo({ result: resultLanguage, source: language });\r\n\t};\r\n\r\n\tconst handleResultClick = (event: MouseEvent<HTMLLIElement>) => {\r\n\t\tconst language = event.currentTarget.dataset.lang as Languages;\r\n\t\tif (language === sourceLanguage) {\r\n\t\t\tswapLanguages();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsetLanguageInfo({ source: sourceLanguage, result: language });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<StyledBar>\r\n\t\t\t<LanguageList>\r\n\t\t\t\t{/* <LanguageItem>Detect Language</LanguageItem> */}\r\n\t\t\t\t<LanguageItem\r\n\t\t\t\t\tonClick={handleSourceClick}\r\n\t\t\t\t\tdata-lang=\"en-US\"\r\n\t\t\t\t\tclassName={sourceLanguage === 'en-US' ? 'selected' : ''}\r\n\t\t\t\t>\r\n\t\t\t\t\tEnglish\r\n\t\t\t\t</LanguageItem>\r\n\t\t\t\t<LanguageItem\r\n\t\t\t\t\tonClick={handleSourceClick}\r\n\t\t\t\t\tdata-lang=\"es-US\"\r\n\t\t\t\t\tclassName={sourceLanguage === 'es-US' ? 'selected' : ''}\r\n\t\t\t\t>\r\n\t\t\t\t\tSpanish\r\n\t\t\t\t</LanguageItem>\r\n\t\t\t</LanguageList>\r\n\t\t\t<SwapLanguage\r\n\t\t\t\taria-label=\"Swap Language\"\r\n\t\t\t\tdata-title=\"Swap Language\"\r\n\t\t\t\tonClick={swapLanguages}\r\n\t\t\t>\r\n\t\t\t\t<MdSwapHoriz color=\"currentColor\" size=\"28\" />\r\n\t\t\t</SwapLanguage>\r\n\t\t\t<LanguageList>\r\n\t\t\t\t<LanguageItem\r\n\t\t\t\t\tonClick={handleResultClick}\r\n\t\t\t\t\tdata-lang=\"en-US\"\r\n\t\t\t\t\tclassName={resultLanguage === 'en-US' ? 'selected' : ''}\r\n\t\t\t\t>\r\n\t\t\t\t\tEnglish\r\n\t\t\t\t</LanguageItem>\r\n\t\t\t\t<LanguageItem\r\n\t\t\t\t\tonClick={handleResultClick}\r\n\t\t\t\t\tdata-lang=\"es-US\"\r\n\t\t\t\t\tclassName={resultLanguage === 'es-US' ? 'selected' : ''}\r\n\t\t\t\t>\r\n\t\t\t\t\tSpanish\r\n\t\t\t\t</LanguageItem>\r\n\t\t\t</LanguageList>\r\n\t\t</StyledBar>\r\n\t);\r\n}\r\n\r\nexport default LanguagesBar;\r\n","const useSpeechSynthesis = (\r\n\ttext: string,\r\n\tlanguage: string\r\n): [boolean, (onEnd: () => void) => void, () => void] => {\r\n\tconst isSupported: boolean = window.speechSynthesis !== undefined;\r\n\r\n\tconst textToSpeech = (onEnd: () => void) => {\r\n\t\tconst utterance: SpeechSynthesisUtterance =\r\n\t\t\tnew SpeechSynthesisUtterance(text);\r\n\t\tutterance.onend = onEnd;\r\n\t\tutterance.lang = language;\r\n\t\twindow.speechSynthesis.speak(utterance);\r\n\t};\r\n\r\n\tconst cancelSpeechSynthesis = () => window.speechSynthesis.cancel();\r\n\r\n\treturn [isSupported, textToSpeech, cancelSpeechSynthesis];\r\n};\r\n\r\nexport default useSpeechSynthesis;\r\n","import { Dispatch, SetStateAction } from 'react';\r\n\r\nconst useSpeechRecognition = (\r\n\tlanguage: string,\r\n\tsetText: Dispatch<SetStateAction<string>>\r\n): [boolean, (onEnd: () => void) => void, () => void] => {\r\n\tconst isSupported = window.SpeechRecognition !== undefined,\r\n\t\tisSupportedWithPrefix =\r\n\t\t\t(window as any).webkitSpeechRecognition !== undefined;\r\n\r\n\tlet speech = isSupported\r\n\t\t? new SpeechRecognition()\r\n\t\t: isSupportedWithPrefix\r\n\t\t? new (window as any).webkitSpeechRecognition()\r\n\t\t: {};\r\n\r\n\tconst onSpeak = (\r\n\t\t{ results }: SpeechRecognitionEvent,\r\n\t\tonEnd: () => void\r\n\t) => {\r\n\t\tconst [result] = Array.from(results[0]),\r\n\t\t\t{ transcript } = result;\r\n\t\tsetText(transcript);\r\n\t\tonEnd();\r\n\t};\r\n\r\n\tconst startSpeechRecognition = (onEnd: () => void) => {\r\n\t\tspeech.lang = language;\r\n\t\tspeech.start();\r\n\t\tspeech.addEventListener('result', (e: SpeechRecognitionEvent) =>\r\n\t\t\tonSpeak(e, onEnd)\r\n\t\t);\r\n\t};\r\n\r\n\tconst abortSpeechRecognition = () => speech.abort();\r\n\r\n\treturn [\r\n\t\tisSupported || isSupportedWithPrefix,\r\n\t\tstartSpeechRecognition,\r\n\t\tabortSpeechRecognition,\r\n\t];\r\n};\r\n\r\nexport default useSpeechRecognition;\r\n","import { css } from 'styled-components';\n\nexport const textBoxStyles = css`\n\tborder-radius: 2.5rem;\n\tbox-shadow: 0 0 5px 2px var(--color-bg-3);\n\theight: auto;\n\tpadding: 2rem 2rem 0;\n\tposition: relative;\n`;\n","import { FormEvent } from 'react';\r\nimport styled from 'styled-components';\r\nimport { textBoxStyles } from '../styles/mixins';\r\n\r\nconst TextBox = styled.div`\r\n\t${textBoxStyles};\r\n`;\r\n\r\nexport const Actions = styled.div`\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n`;\r\n\r\nconst handleAutoGrow = ({ currentTarget }: FormEvent<HTMLTextAreaElement>) => {\r\n\tcurrentTarget.style.height = 'auto';\r\n\tcurrentTarget.style.height = `${currentTarget.scrollHeight}px`;\r\n};\r\n\r\nexport const TextArea = styled.textarea.attrs((props) => ({\r\n\t...props,\r\n\tonInput: handleAutoGrow,\r\n}))`\r\n\tbackground: none;\r\n\tborder: none;\r\n\tcolor: var(--color-text);\r\n\tdisplay: block;\r\n\tfont-family: inherit;\r\n\tfont-size: 1.6rem;\r\n\tline-height: 1.6;\r\n\tmin-height: 17rem;\r\n\theight: auto;\r\n\tresize: none;\r\n\toverflow: hidden;\r\n\tpadding-bottom: 2rem;\r\n\tpadding-right: 1rem;\r\n\twidth: 100%;\r\n\t&:focus {\r\n\t\toutline: none;\r\n\t}\r\n\t&::placeholder {\r\n\t\tcolor: currentColor;\r\n\t\topacity: 0.79;\r\n\t\tfont-size: 2.4rem;\r\n\t}\r\n`;\r\n\r\nexport default TextBox;\r\n","import styled from 'styled-components';\n\ninterface BtnIconProps {\n\tshow?: boolean;\n}\n\nconst BtnIcon = styled.button<BtnIconProps>`\n\tbackground: none;\n\tborder: none;\n\tcolor: inherit;\n\tcursor: pointer;\n\tdisplay: inline-block;\n\tmargin: 0;\n\tpadding: 1.2rem;\n\ttext-align: center;\n\topacity: ${({ show = true }) => (show ? '1' : '0')};\n\tvisibility: ${({ show = true }) => (show ? 'visible' : 'hidden')};\n\ttransition: 0.3s ease-out;\n`;\n\nexport default BtnIcon;\n","import { MouseEvent, ReactElement, useState } from 'react';\r\nimport { MdStop } from 'react-icons/md';\r\nimport BtnIcon from './BtnIcon';\r\n\r\ninterface BtnWithPlayStateProps {\r\n\ticon: ReactElement;\r\n\tlabel?: string;\r\n\ttitle?: string;\r\n\tshow?: boolean;\r\n\tonClick: (onEnd: () => void) => void;\r\n\tonCancel: () => void;\r\n}\r\n\r\nfunction BtnWithPlayState({\r\n\ticon,\r\n\tlabel,\r\n\ttitle,\r\n\tshow,\r\n\tonClick,\r\n\tonCancel,\r\n}: BtnWithPlayStateProps) {\r\n\tconst [isPlaying, setPlaying] = useState(false);\r\n\r\n\tconst handlePlay = (e: MouseEvent<HTMLButtonElement>) => {\r\n\t\tsetPlaying(!isPlaying);\r\n\t\tif (isPlaying) {\r\n\t\t\tonCancel();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Esto cambia el icono de detener por el default\r\n\t\tonClick(() => {\r\n\t\t\tsetPlaying(false);\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<BtnIcon\r\n\t\t\t\tonClick={handlePlay}\r\n\t\t\t\tshow={show}\r\n\t\t\t\taria-label={label}\r\n\t\t\t\tdata-title={title}\r\n\t\t\t>\r\n\t\t\t\t{isPlaying ? <MdStop size=\"24\" color=\"currentColor\" /> : icon}\r\n\t\t\t</BtnIcon>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default BtnWithPlayState;\r\n","import { ChangeEvent, useContext, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { MdClear, MdMic, MdVolumeUp } from 'react-icons/md';\r\nimport { TranslateBoxProps } from '../constants/languages';\r\nimport { TranslateContext } from '../context/TranslateContext';\r\nimport useSpeechSynthesis from '../hooks/useSpeechSynthesis';\r\nimport useSpeechRecognition from '../hooks/useSpeechRecognition';\r\nimport TextBox, { Actions, TextArea } from './TextBox';\r\nimport BtnIcon from './BtnIcon';\r\nimport BtnWithPlayState from './BtnWithPlayState';\r\n\r\nconst CharactersCounter = styled.span`\r\n\tmargin-left: auto;\r\n`;\r\n\r\nconst BtnClear = styled(BtnIcon)`\r\n\tpadding: 0.6rem;\r\n\tposition: absolute !important;\r\n\tright: 0;\r\n\ttop: 2rem;\r\n`;\r\n\r\nfunction SourceBox({ language }: TranslateBoxProps) {\r\n\tconst charactersLimit = 200;\r\n\r\n\tconst {\r\n\t\tsourceText: text,\r\n\t\tclearText,\r\n\t\tsetText,\r\n\t} = useContext(TranslateContext);\r\n\r\n\tconst handleChange = ({\r\n\t\tcurrentTarget,\r\n\t}: ChangeEvent<HTMLTextAreaElement>) => {\r\n\t\tsetText(currentTarget.value.substring(0, charactersLimit));\r\n\t};\r\n\r\n\tconst [isSpeechSynthesisSupported, textToSpeech, cancelSpeechSynthesis] =\r\n\t\tuseSpeechSynthesis(text, language);\r\n\r\n\tconst [\r\n\t\tisSpeechRecognitionSupported,\r\n\t\tstartSpeechRecognition,\r\n\t\tabortSpeechRecognition,\r\n\t] = useSpeechRecognition(language, setText);\r\n\r\n\tconst textAreaRef = useRef<HTMLTextAreaElement>(null!);\r\n\r\n\tconst handleClear = () => {\r\n\t\tconst event = new Event('input', { bubbles: true });\r\n\t\ttextAreaRef.current.value = '';\r\n\t\ttextAreaRef.current.dispatchEvent(event);\r\n\t\tclearText();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<TextBox>\r\n\t\t\t<BtnClear\r\n\t\t\t\tshow={text.length > 0}\r\n\t\t\t\taria-label=\"Clear source text\"\r\n\t\t\t\tdata-title=\"Clear source text\"\r\n\t\t\t\tdata-tooltip-pos=\"right\"\r\n\t\t\t\tonClick={handleClear}\r\n\t\t\t>\r\n\t\t\t\t<MdClear size=\"24\" color=\"currentColor\" />\r\n\t\t\t</BtnClear>\r\n\t\t\t<TextArea\r\n\t\t\t\taria-label=\"Enter the source text\"\r\n\t\t\t\tmaxLength={charactersLimit}\r\n\t\t\t\tref={textAreaRef}\r\n\t\t\t\trows={2}\r\n\t\t\t\tvalue={text}\r\n\t\t\t\tonChange={handleChange}\r\n\t\t\t/>\r\n\t\t\t<Actions>\r\n\t\t\t\t{isSpeechRecognitionSupported && (\r\n\t\t\t\t\t<BtnWithPlayState\r\n\t\t\t\t\t\ticon={<MdMic size=\"24\" color=\"currentColor\" />}\r\n\t\t\t\t\t\tlabel=\"Translate by voice\"\r\n\t\t\t\t\t\ttitle=\"Translate by voice\"\r\n\t\t\t\t\t\tonClick={startSpeechRecognition}\r\n\t\t\t\t\t\tonCancel={abortSpeechRecognition}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\r\n\t\t\t\t{isSpeechSynthesisSupported && (\r\n\t\t\t\t\t<BtnWithPlayState\r\n\t\t\t\t\t\ticon={<MdVolumeUp size=\"24\" color=\"currentColor\" />}\r\n\t\t\t\t\t\tlabel=\"Listen\"\r\n\t\t\t\t\t\tshow={text.length > 0}\r\n\t\t\t\t\t\ttitle=\"Listen\"\r\n\t\t\t\t\t\tonClick={textToSpeech}\r\n\t\t\t\t\t\tonCancel={cancelSpeechSynthesis}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t\t<CharactersCounter>\r\n\t\t\t\t\t{text.length} / {charactersLimit}\r\n\t\t\t\t</CharactersCounter>\r\n\t\t\t</Actions>\r\n\t\t</TextBox>\r\n\t);\r\n}\r\n\r\nexport default SourceBox;\r\n","import {\r\n\tDispatch,\r\n\tReactNode,\r\n\tSetStateAction,\r\n\tuseEffect,\r\n\tuseState,\r\n} from 'react';\r\nimport styled from 'styled-components';\r\nimport { hideToastAnimation, showToastAnimation } from '../styles/animations';\r\n\r\ninterface BaseToastProps {\r\n\topen: boolean;\r\n}\r\n\r\ninterface ToastProps extends BaseToastProps {\r\n\tchildren?: ReactNode;\r\n\tonClose?: Dispatch<SetStateAction<boolean>>;\r\n}\r\n\r\nconst StyledToast = styled.div<BaseToastProps>`\r\n\tbackground-color: #323232;\r\n\tborder-radius: 0.4rem;\r\n\tcolor: #fff;\r\n\tfont-size: 1.4rem;\r\n\tfont-weight: 500;\r\n\tletter-spacing: 0.02857em;\r\n\tline-height: 1.75;\r\n\tmin-width: 8rem;\r\n\tpadding: 0.6rem 1.6rem;\r\n\tz-index: 10000;\r\n\tposition: fixed;\r\n\tleft: 2.5rem;\r\n\tbottom: 2.5rem;\r\n\tanimation: ${({ open }) => (open ? showToastAnimation : hideToastAnimation)}\r\n\t\t0.25s ease;\r\n`;\r\n\r\nfunction Toast({ children, open, onClose }: ToastProps) {\r\n\tconst [shouldRender, setRender] = useState(open);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (open) setRender(true);\r\n\t}, [open]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (open) {\r\n\t\t\tconst timeout: number = window.setTimeout(\r\n\t\t\t\t() => onClose && onClose(false),\r\n\t\t\t\t3000\r\n\t\t\t);\r\n\r\n\t\t\treturn () => window.clearTimeout(timeout);\r\n\t\t}\r\n\t}, [open, onClose]);\r\n\r\n\tconst handleAnimationEnd = () => {\r\n\t\tif (!open) setRender(false);\r\n\t};\r\n\r\n\tif (!shouldRender) return null;\r\n\r\n\treturn (\r\n\t\t<StyledToast onAnimationEnd={handleAnimationEnd} open={open}>\r\n\t\t\t{children}\r\n\t\t</StyledToast>\r\n\t);\r\n}\r\n\r\nexport default Toast;\r\n","import { useContext, useEffect, useRef, useState } from 'react';\r\nimport { MdContentCopy, MdVolumeUp } from 'react-icons/md';\r\nimport { TranslateBoxProps } from '../constants/languages';\r\nimport { TranslateContext } from '../context/TranslateContext';\r\nimport useSpeechSynthesis from '../hooks/useSpeechSynthesis';\r\nimport * as clipboard from '../helpers/clipboard';\r\nimport TextBox, { Actions, TextArea } from './TextBox';\r\nimport BtnIcon from './BtnIcon';\r\nimport BtnWithPlayState from './BtnWithPlayState';\r\nimport Toast from './Toast';\r\n\r\nfunction ResultBox({ language }: TranslateBoxProps) {\r\n\tconst [isToastOpen, setToastOpen] = useState(false);\r\n\r\n\tconst { resultText } = useContext(TranslateContext);\r\n\r\n\tconst textAreaRef = useRef<HTMLTextAreaElement>(null!);\r\n\r\n\tconst [isSpeechSynthesisSupported, textToSpeech, cancelSpeechSynthesis] =\r\n\t\tuseSpeechSynthesis(resultText, language);\r\n\r\n\tconst handleCopy = () => {\r\n\t\tclipboard\r\n\t\t\t.copy(resultText, textAreaRef.current)\r\n\t\t\t.then(() => setToastOpen(true));\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\ttextAreaRef.current.style.height = 'auto';\r\n\t\ttextAreaRef.current.style.height = `${textAreaRef.current.scrollHeight}px`;\r\n\t}, [resultText]);\r\n\r\n\treturn (\r\n\t\t<TextBox>\r\n\t\t\t<Toast open={isToastOpen} onClose={setToastOpen}>\r\n\t\t\t\tTranslation copied\r\n\t\t\t</Toast>\r\n\t\t\t<TextArea\r\n\t\t\t\tref={textAreaRef}\r\n\t\t\t\tvalue={resultText}\r\n\t\t\t\treadOnly={true}\r\n\t\t\t\tplaceholder=\"Translation\"\r\n\t\t\t\taria-label=\"Translation\"\r\n\t\t\t/>\r\n\t\t\t<Actions>\r\n\t\t\t\t{isSpeechSynthesisSupported && (\r\n\t\t\t\t\t<BtnWithPlayState\r\n\t\t\t\t\t\ticon={<MdVolumeUp size=\"24\" color=\"currentColor\" />}\r\n\t\t\t\t\t\tlabel=\"Listen\"\r\n\t\t\t\t\t\tshow={resultText.length > 0}\r\n\t\t\t\t\t\ttitle=\"Listen\"\r\n\t\t\t\t\t\tonClick={textToSpeech}\r\n\t\t\t\t\t\tonCancel={cancelSpeechSynthesis}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t\t<BtnIcon\r\n\t\t\t\t\tshow={resultText.length > 0}\r\n\t\t\t\t\taria-label=\"Copy translation\"\r\n\t\t\t\t\tdata-title=\"Copy translation\"\r\n\t\t\t\t\tonClick={handleCopy}\r\n\t\t\t\t>\r\n\t\t\t\t\t<MdContentCopy size=\"24\" color=\"currentColor\" />\r\n\t\t\t\t</BtnIcon>\r\n\t\t\t</Actions>\r\n\t\t</TextBox>\r\n\t);\r\n}\r\n\r\nexport default ResultBox;\r\n","export const copy = (\r\n\ttext: string,\r\n\telement: HTMLInputElement | HTMLTextAreaElement\r\n): Promise<void> => {\r\n\tif (window.navigator.clipboard !== undefined) {\r\n\t\treturn window.navigator.clipboard.writeText(text);\r\n\t}\r\n\treturn new Promise((res) => {\r\n\t\telement.select();\r\n\t\twindow.document.execCommand('copy');\r\n\t\twindow.getSelection()?.removeAllRanges();\r\n\t\tres();\r\n\t});\r\n};\r\n","import { ReactElement, ReactNode, useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { MdErrorOutline, MdCheckCircle } from 'react-icons/md';\r\nimport { hideAlertAnimation, showAlertAnimation } from '../styles/animations';\r\n\r\ninterface BaseAlertProps {\r\n\tseverity: 'success' | 'error';\r\n\tshow?: boolean;\r\n}\r\n\r\ninterface AlertProps extends BaseAlertProps {\r\n\tchildren?: ReactNode;\r\n\ticon?: ReactElement;\r\n}\r\n\r\nconst colors = {\r\n\tsuccess: ['var(--color-success)', 'var(--color-bg-success)'],\r\n\terror: ['var(--color-error)', 'var(--color-bg-error)'],\r\n};\r\n\r\nconst StyledAlert = styled.div<BaseAlertProps>`\r\n\tz-index: 100;\r\n\tcolor: ${({ severity }) => colors[severity][0]};\r\n\tbackground-color: ${({ severity }) => colors[severity][1]};\r\n\tfont-weight: 400;\r\n\tletter-spacing: 0.01071em;\r\n\twidth: 100%;\r\n\tpadding: 1.4rem 1rem;\r\n\tposition: absolute;\r\n\tleft: 0;\r\n\tdisplay: flex;\r\n\talign-items: flex-start;\r\n\t> :first-child {\r\n\t\tflex-shrink: 0;\r\n\t\tmargin-right: 1rem;\r\n\t}\r\n\tanimation: ${({ show }) => (show ? showAlertAnimation : hideAlertAnimation)}\r\n\t\t0.3s ease;\r\n`;\r\n\r\nconst AlertMessage = styled.span`\r\n\tfont-size: 1.4rem;\r\n`;\r\n\r\nconst icons = {\r\n\tsuccess: <MdCheckCircle size=\"22\" color=\"currentColor\" />,\r\n\terror: <MdErrorOutline size=\"22\" color=\"currentColor\" />,\r\n};\r\n\r\nfunction Alert({\r\n\tchildren,\r\n\ticon,\r\n\tseverity = 'success',\r\n\tshow = true,\r\n}: AlertProps) {\r\n\tconst [shouldRender, setRender] = useState(show);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (show) setRender(true);\r\n\t}, [show]);\r\n\r\n\tconst handleAnimationEnd = () => {\r\n\t\tif (!show) setRender(false);\r\n\t};\r\n\r\n\tif (!shouldRender) return null;\r\n\r\n\treturn (\r\n\t\t<StyledAlert\r\n\t\t\tonAnimationEnd={handleAnimationEnd}\r\n\t\t\trole=\"alert\"\r\n\t\t\tseverity={severity}\r\n\t\t\tshow={show}\r\n\t\t>\r\n\t\t\t{icon ? icon : icons[severity]}\r\n\t\t\t<AlertMessage>{children}</AlertMessage>\r\n\t\t</StyledAlert>\r\n\t);\r\n}\r\n\r\nexport default Alert;\r\n","import { useContext } from 'react';\r\nimport styled from 'styled-components';\r\nimport { TranslateContext } from '../context/TranslateContext';\r\nimport Wrapper from './Wrapper';\r\nimport LanguagesBar from './LanguagesBar';\r\nimport SourceBox from './SourceBox';\r\nimport ResultBox from './ResultBox';\r\nimport Alert from './Alert';\r\n\r\nconst StyledTranslator = styled.main`\r\n\tmargin: 2rem 0;\r\n`;\r\n\r\nconst Grid = styled.div`\r\n\tposition: relative;\r\n\tdisplay: grid;\r\n\tgap: 2rem;\r\n\t@media (min-width: 56.25em) {\r\n\t\tgap: 0;\r\n\t\tgrid-template-columns: repeat(2, 1fr);\r\n\t}\r\n`;\r\n\r\nfunction Translator() {\r\n\tconst { languageInfo, msgError, swapLanguages, setLanguageInfo } =\r\n\t\tuseContext(TranslateContext);\r\n\r\n\treturn (\r\n\t\t<StyledTranslator>\r\n\t\t\t<Wrapper>\r\n\t\t\t\t<Grid>\r\n\t\t\t\t\t<Alert severity=\"error\" show={msgError !== ''}>\r\n\t\t\t\t\t\t{msgError}\r\n\t\t\t\t\t</Alert>\r\n\t\t\t\t\t<LanguagesBar\r\n\t\t\t\t\t\tsourceLanguage={languageInfo.source}\r\n\t\t\t\t\t\tresultLanguage={languageInfo.result}\r\n\t\t\t\t\t\tswapLanguages={swapLanguages}\r\n\t\t\t\t\t\tsetLanguageInfo={setLanguageInfo}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<SourceBox language={languageInfo.source} />\r\n\t\t\t\t\t<ResultBox language={languageInfo.result} />\r\n\t\t\t\t</Grid>\r\n\t\t\t</Wrapper>\r\n\t\t</StyledTranslator>\r\n\t);\r\n}\r\n\r\nexport default Translator;\r\n","import Header from '../components/Header';\nimport Translator from '../components/Translator';\n\nfunction HomePage() {\n\treturn (\n\t\t<div>\n\t\t\t<Header />\n\t\t\t<Translator />\n\t\t</div>\n\t);\n}\n\nexport default HomePage;\n"],"sourceRoot":""}