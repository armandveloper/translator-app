{"version":3,"sources":["hooks/useOnline.ts","context/TranslateContext.tsx","components/Wrapper.tsx","components/LanguagesBar.tsx","hooks/useSpeechSynthesis.ts","hooks/useSpeechRecognition.ts","styles/mixins.ts","components/TextBox.tsx","components/BtnIcon.tsx","components/BtnWithPlayState.tsx","components/SourceBox.tsx","components/Toast.tsx","components/ResultBox.tsx","helpers/clipboard.ts","components/Alert.tsx","components/Translator.tsx"],"names":["useOnline","useState","window","navigator","onLine","isOnline","setOnline","useEffect","updateOnlineState","addEventListener","removeEventListener","TranslateContext","createContext","TranslateProvider","children","sourceText","setSourceText","resultText","setResultText","source","result","languageInfo","setLanguageInfo","hasLimitExceeded","setLimitExceeded","msgError","setError","apiKey","process","translate","useCallback","text","target","a","fetch","method","headers","body","JSON","stringify","q","res","status","json","data","translations","translatedText","console","error","timeoutID","useRef","clearTimeout","current","trim","setTimeout","substring","substr","Provider","value","clearText","setText","swapLanguages","aux","sourcetAux","Wrapper","styled","div","StyledBar","LanguageList","ul","LanguageItem","li","SwapLanguage","button","LanguagesBar","sourceLanguage","resultLanguage","handleSourceClick","event","language","currentTarget","dataset","lang","handleResultClick","onClick","data-lang","className","aria-label","data-title","color","size","useSpeechSynthesis","undefined","speechSynthesis","onEnd","utterance","SpeechSynthesisUtterance","onend","speak","cancel","useSpeechRecognition","isSupported","SpeechRecognition","isSupportedWithPrefix","webkitSpeechRecognition","speech","start","e","results","Array","from","transcript","onSpeak","abort","textBoxStyles","css","TextBox","Actions","handleAutoGrow","style","height","scrollHeight","TextArea","textarea","attrs","props","onInput","BtnIcon","show","BtnWithPlayState","icon","label","title","onCancel","isPlaying","setPlaying","CharactersCounter","span","BtnClear","SourceBox","useContext","isSpeechSynthesisSupported","textToSpeech","cancelSpeechSynthesis","isSpeechRecognitionSupported","startSpeechRecognition","abortSpeechRecognition","textAreaRef","length","data-tooltip-pos","Event","bubbles","dispatchEvent","maxLength","ref","rows","onChange","StyledToast","open","showToastAnimation","hideToastAnimation","Toast","onClose","shouldRender","setRender","timeout","onAnimationEnd","ResultBox","isToastOpen","setToastOpen","readOnly","placeholder","element","clipboard","writeText","Promise","select","document","execCommand","getSelection","removeAllRanges","then","colors","success","StyledAlert","severity","showAlertAnimation","hideAlertAnimation","AlertMessage","icons","Alert","role","StyledTranslator","main","Grid","Translator"],"mappings":"2QAoBeA,EAlBG,WACjB,MAA8BC,mBAASC,OAAOC,UAAUC,QAAxD,mBAAOC,EAAP,KAAiBC,EAAjB,KAcA,OAZAC,qBAAU,WACT,IAAMC,EAAoB,kBAAMF,EAAUJ,OAAOC,UAAUC,SAK3D,OAHAF,OAAOO,iBAAiB,SAAUD,GAClCN,OAAOO,iBAAiB,UAAWD,GAE5B,WACNN,OAAOQ,oBAAoB,SAAUF,GACrCN,OAAOQ,oBAAoB,UAAWF,MAErC,IAEIH,G,OCSKM,EAAmBC,wBAAc,IAEjCC,EAAoB,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,SACnC,EAAoCb,mBAAS,IAA7C,mBAAOc,EAAP,KAAmBC,EAAnB,KAEA,EAAoCf,mBAAS,IAA7C,mBAAOgB,EAAP,KAAmBC,EAAnB,KAEA,EAAwCjB,mBAAuB,CAC9DkB,OAAQ,QACRC,OAAQ,UAFT,mBAAOC,EAAP,KAAqBC,EAArB,KAKA,EAA6CrB,oBAAS,GAAtD,mBAAOsB,EAAP,KAAyBC,EAAzB,KAEA,EAA6BvB,mBAAS,IAAtC,mBAAOwB,EAAP,KAAiBC,EAAjB,KAeCC,EAASC,qDAEJC,EAAYC,sBAAW,uCAC5B,WAAOC,EAAcZ,EAAgBa,GAArC,iBAAAC,EAAA,+EAEoBC,MANT,+DAMoB,CAC5BC,OAAQ,OACRC,QAAS,CACR,eAAgB,mBAChB,iBAAkBT,EAClB,kBAAmB,kCAEpBU,KAAMC,KAAKC,UAAU,CACpBC,EAAGT,EACHZ,SACAa,aAZJ,UAeqB,OAbbS,EAFR,QAeUC,OAfV,uBAgBGlB,GAAiB,GAhBpB,6BAmBqB,MAAfiB,EAAIC,OAnBV,wBAoBGhB,EAAS,wBApBZ,4CAwB2Ce,EAAIE,OAxB/C,QAwBQvB,EAxBR,OAyBEF,EAAcE,EAAOwB,KAAKC,aAAaC,gBAzBzC,kDA2BEC,QAAQC,MAAR,MACAtB,EAAS,wBA5BX,0DAD4B,0DAgC5B,CAACC,IAGFpB,qBAAU,WACU,KAAfQ,GAAmBG,EAAc,MACnC,CAACH,EAAYc,IAEhB,IAAMoB,EAAYC,iBAAe,MAE3B7C,EAAWL,IAgCjB,OA7BAO,qBAAU,WAERmB,EADGH,EACM,gDACEA,EAEAlB,EAKF,GAHR,qGAHQ,MAQR,CAACA,EAAUkB,IAGdhB,qBAAU,WAETL,OAAOiD,aAAaF,EAAUG,UAC1B7B,GAAqBlB,GAAaU,EAAWsC,SAEjDJ,EAAUG,QAAUlD,OAAOoD,YAAW,WACrCzB,EACCd,EACAM,EAAaF,OAAOoC,UAAU,EAAG,GACjClC,EAAaD,OAAOoC,OAAO,EAAG,MAE7B,QACD,CAACjC,EAAkBlB,EAAUU,EAAYc,EAAWR,IAGtD,cAACV,EAAiB8C,SAAlB,CACCC,MAAO,CACNrC,eACAI,WACAR,aACAF,aACA4C,UArFe,kBAAM3C,EAAc,KAsFnCM,kBACAsC,QAAS5C,EACT6C,cAlGmB,WACrB,IAAMC,EAAoBzC,EAAaF,OACtC4C,EAAqBhD,EAEtBO,EAAgB,CAAEH,OAAQE,EAAaD,OAAQA,OAAQ0C,IACvD9C,EAAcC,GAEdC,EAAc6C,IA4FZlC,aAVF,SAaEf,M,6CC9IEkD,E,KAAUC,EAAOC,IAAV,yGAOEF,O,uGCGTG,EAAYF,IAAOC,IAAV,yLASTE,EAAeH,IAAOI,GAAV,qKAWZC,EAAeL,IAAOM,GAAV,ilBA6BZC,EAAeP,IAAOQ,OAAV,6PAoFHC,I,UAAAA,EAtEf,YAKuB,IAJtBC,EAIqB,EAJrBA,eACAC,EAGqB,EAHrBA,eACAf,EAEqB,EAFrBA,cACAvC,EACqB,EADrBA,gBAEMuD,EAAoB,SAACC,GAC1B,IAAMC,EAAWD,EAAME,cAAcC,QAAQC,KACzCH,IAAaH,EAIjBtD,EAAgB,CAAEF,OAAQwD,EAAgBzD,OAAQ4D,IAHjDlB,KAMIsB,EAAoB,SAACL,GAC1B,IAAMC,EAAWD,EAAME,cAAcC,QAAQC,KACzCH,IAAaJ,EAIjBrD,EAAgB,CAAEH,OAAQwD,EAAgBvD,OAAQ2D,IAHjDlB,KAMF,OACC,eAACM,EAAD,WACC,eAACC,EAAD,WAEC,cAACE,EAAD,CACCc,QAASP,EACTQ,YAAU,QACVC,UAA8B,UAAnBX,EAA6B,WAAa,GAHtD,qBAOA,cAACL,EAAD,CACCc,QAASP,EACTQ,YAAU,QACVC,UAA8B,UAAnBX,EAA6B,WAAa,GAHtD,wBAQD,cAACH,EAAD,CACCe,aAAW,gBACXC,aAAW,gBACXJ,QAASvB,EAHV,SAKC,cAAC,IAAD,CAAa4B,MAAM,eAAeC,KAAK,SAExC,eAACtB,EAAD,WACC,cAACE,EAAD,CACCc,QAASD,EACTE,YAAU,QACVC,UAA8B,UAAnBV,EAA6B,WAAa,GAHtD,qBAOA,cAACN,EAAD,CACCc,QAASD,EACTE,YAAU,QACVC,UAA8B,UAAnBV,EAA6B,WAAa,GAHtD,4B,QClHWe,EAnBY,SAC1B5D,EACAgD,GAcA,MAAO,MAZiDa,IAA3B1F,OAAO2F,gBAEf,SAACC,GACrB,IAAMC,EACL,IAAIC,yBAAyBjE,GAC9BgE,EAAUE,MAAQH,EAClBC,EAAUb,KAAOH,EACjB7E,OAAO2F,gBAAgBK,MAAMH,IAGA,kBAAM7F,OAAO2F,gBAAgBM,YC6B7CC,EAzCc,SAC5BrB,EACAnB,GAEA,IAAMyC,OAA2CT,IAA7B1F,OAAOoG,kBAC1BC,OAC6CX,IAA3C1F,OAAesG,wBAEdC,EAASJ,EACV,IAAIC,kBACJC,EACA,IAAKrG,OAAesG,wBACpB,GAsBH,MAAO,CACNH,GAAeE,EAXe,SAACT,GAC/BW,EAAOvB,KAAOH,EACd0B,EAAOC,QACPD,EAAOhG,iBAAiB,UAAU,SAACkG,GAAD,OAbnB,SAAC,EAEhBb,GACK,IAFHc,EAEE,EAFFA,QAGF,EAAiBC,MAAMC,KAAKF,EAAQ,IACjCG,EADH,oBACGA,WACHnD,EAAQmD,GACRjB,IAOCkB,CAAQL,EAAGb,OAIkB,kBAAMW,EAAOQ,W,QChChCC,EAAgBC,YAAH,qKCEpBC,EAAUnD,IAAOC,IAAV,mCACVgD,GAGUG,EAAUpD,IAAOC,IAAV,sEAKdoD,EAAiB,SAAC,GAAuD,IAArDtC,EAAoD,EAApDA,cACzBA,EAAcuC,MAAMC,OAAS,OAC7BxC,EAAcuC,MAAMC,OAApB,UAAgCxC,EAAcyC,aAA9C,OAGYC,EAAWzD,IAAO0D,SAASC,OAAM,SAACC,GAAD,mBAAC,eAC3CA,GAD0C,IAE7CC,QAASR,MAFcrD,CAAH,ycA4BNmD,IC1BAW,EAdC9D,IAAOQ,OAAV,+PASD,oBAAGuD,KAAH,qBAA6B,IAAM,OAChC,oBAAGA,KAAH,qBAA6B,UAAY,YCiCzCC,I,IAAAA,EApCf,YAO2B,IAN1BC,EAMyB,EANzBA,KACAC,EAKyB,EALzBA,MACAC,EAIyB,EAJzBA,MACAJ,EAGyB,EAHzBA,KACA5C,EAEyB,EAFzBA,QACAiD,EACyB,EADzBA,SAEA,EAAgCpI,oBAAS,GAAzC,mBAAOqI,EAAP,KAAkBC,EAAlB,KAcA,OACC,8BACC,cAAC,EAAD,CACCnD,QAfgB,SAACuB,GACnB4B,GAAYD,GACRA,EACHD,IAIDjD,GAAQ,WACPmD,GAAW,OAQVP,KAAMA,EACNzC,aAAY4C,EACZ3C,aAAY4C,EAJb,SAMEE,EAAY,cAAC,IAAD,CAAQ5C,KAAK,KAAKD,MAAM,iBAAoByC,OChCvDM,EAAoBvE,IAAOwE,KAAV,kDAIjBC,EAAWzE,YAAO8D,EAAP9D,CAAH,6GAwFC0E,I,EAAAA,EAjFf,YAAqD,IAAhC5D,EAA+B,EAA/BA,SAGpB,EAII6D,qBAAWjI,oBAHFoB,EADb,EACChB,WACA4C,EAFD,EAECA,UACAC,EAHD,EAGCA,QASD,EACC+B,EAAmB5D,EAAMgD,GAD1B,mBAAO8D,EAAP,KAAmCC,EAAnC,KAAiDC,EAAjD,KAGA,EAII3C,EAAqBrB,EAAUnB,GAJnC,mBACCoF,EADD,KAECC,EAFD,KAGCC,EAHD,KAMMC,EAAcjG,iBAA4B,MAShD,OACC,eAAC,EAAD,WACC,cAACwF,EAAD,CACCV,KAAMjG,EAAKqH,OAAS,EACpB7D,aAAW,oBACXC,aAAW,oBACX6D,mBAAiB,QACjBjE,QAdiB,WACnB,IAAMN,EAAQ,IAAIwE,MAAM,QAAS,CAAEC,SAAS,IAC5CJ,EAAY/F,QAAQM,MAAQ,GAC5ByF,EAAY/F,QAAQoG,cAAc1E,GAClCnB,KAKC,SAOC,cAAC,IAAD,CAAS+B,KAAK,KAAKD,MAAM,mBAE1B,cAACiC,EAAD,CACCnC,aAAW,wBACXkE,UA7CqB,IA8CrBC,IAAKP,EACLQ,KAAM,EACNjG,MAAO3B,EACP6H,SAzCkB,SAAC,GAEmB,IADxC5E,EACuC,EADvCA,cAEApB,EAAQoB,EAActB,MAAMH,UAAU,EAXf,SAmDtB,eAAC8D,EAAD,WACE2B,GACA,cAAC,EAAD,CACCd,KAAM,cAAC,IAAD,CAAOxC,KAAK,KAAKD,MAAM,iBAC7B0C,MAAM,qBACNC,MAAM,qBACNhD,QAAS6D,EACTZ,SAAUa,IAIXL,GACA,cAAC,EAAD,CACCX,KAAM,cAAC,IAAD,CAAYxC,KAAK,KAAKD,MAAM,iBAClC0C,MAAM,SACNH,KAAMjG,EAAKqH,OAAS,EACpBhB,MAAM,SACNhD,QAAS0D,EACTT,SAAUU,IAGZ,eAACP,EAAD,WACEzG,EAAKqH,OADP,MAxEqB,c,OCJnBS,EAAc5F,IAAOC,IAAV,gWAcH,qBAAG4F,KAAmBC,IAAqBC,OAmC1CC,MA/Bf,YAAyD,IAAxCnJ,EAAuC,EAAvCA,SAAUgJ,EAA6B,EAA7BA,KAAMI,EAAuB,EAAvBA,QAChC,EAAkCjK,mBAAS6J,GAA3C,mBAAOK,EAAP,KAAqBC,EAArB,KAqBA,OAnBA7J,qBAAU,WACLuJ,GAAMM,GAAU,KAClB,CAACN,IAEJvJ,qBAAU,WACT,GAAIuJ,EAAM,CACT,IAAMO,EAAkBnK,OAAOoD,YAC9B,kBAAM4G,GAAWA,GAAQ,KACzB,KAGD,OAAO,kBAAMhK,OAAOiD,aAAakH,OAEhC,CAACP,EAAMI,IAMLC,EAGJ,cAACN,EAAD,CAAaS,eAPa,WACrBR,GAAMM,GAAU,IAM4BN,KAAMA,EAAvD,SACEhJ,IAJuB,MCSZyJ,I,IAAAA,EAzDf,YAAqD,IAAhCxF,EAA+B,EAA/BA,SACpB,EAAoC9E,oBAAS,GAA7C,mBAAOuK,EAAP,KAAoBC,EAApB,KAEQxJ,EAAe2H,qBAAWjI,oBAA1BM,WAEFkI,EAAcjG,iBAA4B,MAEhD,EACCyC,EAAmB1E,EAAY8D,GADhC,mBAAO8D,EAAP,KAAmCC,EAAnC,KAAiDC,EAAjD,KAcA,OALAxI,qBAAU,WACT4I,EAAY/F,QAAQmE,MAAMC,OAAS,OACnC2B,EAAY/F,QAAQmE,MAAMC,OAA1B,UAAsC2B,EAAY/F,QAAQqE,aAA1D,QACE,CAACxG,IAGH,eAAC,EAAD,WACC,cAAC,EAAD,CAAO6I,KAAMU,EAAaN,QAASO,EAAnC,gCAGA,cAAC/C,EAAD,CACCgC,IAAKP,EACLzF,MAAOzC,EACPyJ,UAAU,EACVC,YAAY,cACZpF,aAAW,gBAEZ,eAAC8B,EAAD,WACEwB,GACA,cAAC,EAAD,CACCX,KAAM,cAAC,IAAD,CAAYxC,KAAK,KAAKD,MAAM,iBAClC0C,MAAM,SACNH,KAAM/G,EAAWmI,OAAS,EAC1BhB,MAAM,SACNhD,QAAS0D,EACTT,SAAUU,IAGZ,cAAC,EAAD,CACCf,KAAM/G,EAAWmI,OAAS,EAC1B7D,aAAW,mBACXC,aAAW,mBACXJ,QAtCe,WCrBA,IACnBrD,EACA6I,GADA7I,EDsBQd,ECrBR2J,EDqBoBzB,EAAY/F,aCnBGwC,IAA/B1F,OAAOC,UAAU0K,UACb3K,OAAOC,UAAU0K,UAAUC,UAAU/I,GAEtC,IAAIgJ,SAAQ,SAACtI,GAAS,IAAD,EAC3BmI,EAAQI,SACR9K,OAAO+K,SAASC,YAAY,QAC5B,UAAAhL,OAAOiL,sBAAP,SAAuBC,kBACvB3I,QDaE4I,MAAK,kBAAMZ,GAAa,OA+BxB,SAMC,cAAC,IAAD,CAAe/E,KAAK,KAAKD,MAAM,0BE9C9B6F,EAAS,CACdC,QAAS,CAAC,uBAAwB,2BAClCvI,MAAO,CAAC,qBAAsB,0BAGzBwI,EAAcvH,IAAOC,IAAV,4WAEP,gBAAGuH,EAAH,EAAGA,SAAH,OAAkBH,EAAOG,GAAU,MACxB,gBAAGA,EAAH,EAAGA,SAAH,OAAkBH,EAAOG,GAAU,MAa1C,qBAAGzD,KAAmB0D,IAAqBC,OAInDC,EAAe3H,IAAOwE,KAAV,kDAIZoD,EAAQ,CACbN,QAAS,cAAC,IAAD,CAAe7F,KAAK,KAAKD,MAAM,iBACxCzC,MAAO,cAAC,IAAD,CAAgB0C,KAAK,KAAKD,MAAM,kBAkCzBqG,I,IAAAA,GA/Bf,YAKgB,IAJfhL,EAIc,EAJdA,SACAoH,EAGc,EAHdA,KAGc,IAFduD,gBAEc,MAFH,UAEG,MADdzD,YACc,SACd,EAAkC/H,mBAAS+H,GAA3C,mBAAOmC,EAAP,KAAqBC,EAArB,KAUA,OARA7J,qBAAU,WACLyH,GAAMoC,GAAU,KAClB,CAACpC,IAMCmC,EAGJ,eAACqB,EAAD,CACClB,eARyB,WACrBtC,GAAMoC,GAAU,IAQpB2B,KAAK,QACLN,SAAUA,EACVzD,KAAMA,EAJP,UAMEE,GAAc2D,EAAMJ,GACrB,cAACG,EAAD,UAAe9K,OAVS,MCxDrBkL,GAAmB/H,IAAOgI,KAAV,+CAIhBC,GAAOjI,IAAOC,IAAV,kLAmCKiI,UAzBf,WACC,MACCvD,qBAAWjI,oBADJU,EAAR,EAAQA,aAAcI,EAAtB,EAAsBA,SAAUoC,EAAhC,EAAgCA,cAAevC,EAA/C,EAA+CA,gBAG/C,OACC,cAAC0K,GAAD,UACC,cAAChI,EAAA,EAAD,UACC,eAACkI,GAAD,WACC,cAAC,GAAD,CAAOT,SAAS,QAAQzD,KAAmB,KAAbvG,EAA9B,SACEA,IAEF,cAAC,EAAD,CACCkD,eAAgBtD,EAAaF,OAC7ByD,eAAgBvD,EAAaD,OAC7ByC,cAAeA,EACfvC,gBAAiBA,IAElB,cAAC,EAAD,CAAWyD,SAAU1D,EAAaF,SAClC,cAAC,EAAD,CAAW4D,SAAU1D,EAAaD","file":"static/js/6.dd018b35.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nconst useOnline = (): boolean => {\r\n\tconst [isOnline, setOnline] = useState(window.navigator.onLine);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst updateOnlineState = () => setOnline(window.navigator.onLine);\r\n\r\n\t\twindow.addEventListener('online', updateOnlineState);\r\n\t\twindow.addEventListener('offline', updateOnlineState);\r\n\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener('online', updateOnlineState);\r\n\t\t\twindow.removeEventListener('offline', updateOnlineState);\r\n\t\t};\r\n\t}, []);\r\n\r\n\treturn isOnline;\r\n};\r\n\r\nexport default useOnline;\r\n","import {\r\n\tcreateContext,\r\n\tDispatch,\r\n\tReactNode,\r\n\tSetStateAction,\r\n\tuseCallback,\r\n\tuseEffect,\r\n\tuseRef,\r\n\tuseState,\r\n} from 'react';\r\nimport LanguageList, { LanguageInfo } from '../constants/languages';\r\nimport { ITranslateResponse } from '../interfaces/translate.interface';\r\nimport useOnline from '../hooks/useOnline';\r\n\r\ninterface TranslateContextInt {\r\n\tlanguageInfo: LanguageInfo;\r\n\tmsgError: string;\r\n\tresultText: string;\r\n\tsourceText: string;\r\n\tclearText: () => void;\r\n\tsetLanguageInfo: Dispatch<SetStateAction<LanguageInfo>>;\r\n\tsetText: Dispatch<SetStateAction<string>>;\r\n\tswapLanguages: () => void;\r\n\ttranslate: (text: string, source: string, target: string) => Promise<void>;\r\n}\r\n\r\nexport const TranslateContext = createContext({} as TranslateContextInt);\r\n\r\nexport const TranslateProvider = ({ children }: { children: ReactNode }) => {\r\n\tconst [sourceText, setSourceText] = useState('');\r\n\r\n\tconst [resultText, setResultText] = useState('');\r\n\r\n\tconst [languageInfo, setLanguageInfo] = useState<LanguageInfo>({\r\n\t\tsource: 'en-US',\r\n\t\tresult: 'es-US',\r\n\t});\r\n\r\n\tconst [hasLimitExceeded, setLimitExceeded] = useState(false);\r\n\r\n\tconst [msgError, setError] = useState('');\r\n\r\n\tconst swapLanguages = (): void => {\r\n\t\tconst aux: LanguageList = languageInfo.source,\r\n\t\t\tsourcetAux: string = sourceText;\r\n\r\n\t\tsetLanguageInfo({ source: languageInfo.result, result: aux });\r\n\t\tsetSourceText(resultText);\r\n\t\t// Eliminar al agregar API\r\n\t\tsetResultText(sourcetAux);\r\n\t};\r\n\r\n\tconst clearText = () => setSourceText('');\r\n\r\n\tconst url = 'https://deep-translate1.p.rapidapi.com/language/translate/v2',\r\n\t\tapiKey = process.env.REACT_APP_API_KEY || '';\r\n\r\n\tconst translate = useCallback(\r\n\t\tasync (text: string, source: string, target: string): Promise<void> => {\r\n\t\t\ttry {\r\n\t\t\t\tconst res = await fetch(url, {\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t\t'x-rapidapi-key': apiKey,\r\n\t\t\t\t\t\t'x-rapidapi-host': 'deep-translate1.p.rapidapi.com',\r\n\t\t\t\t\t},\r\n\t\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\t\tq: text,\r\n\t\t\t\t\t\tsource,\r\n\t\t\t\t\t\ttarget,\r\n\t\t\t\t\t}),\r\n\t\t\t\t});\r\n\t\t\t\tif (res.status === 429) {\r\n\t\t\t\t\tsetLimitExceeded(true);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (res.status !== 200) {\r\n\t\t\t\t\tsetError('Something Went Wrong');\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst result: ITranslateResponse = await res.json();\r\n\t\t\t\tsetResultText(result.data.translations.translatedText);\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.error(err);\r\n\t\t\t\tsetError('Something Went Wrong');\r\n\t\t\t}\r\n\t\t},\r\n\t\t[apiKey]\r\n\t);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (sourceText === '') setResultText('');\r\n\t}, [sourceText, translate]);\r\n\r\n\tconst timeoutID = useRef<number>(null!);\r\n\r\n\tconst isOnline = useOnline();\r\n\r\n\t// Mensajes de error\r\n\tuseEffect(() => {\r\n\t\tif (hasLimitExceeded) {\r\n\t\t\tsetError('You have exceeded the allowed character limit');\r\n\t\t} else if (!hasLimitExceeded) {\r\n\t\t\tsetError('');\r\n\t\t} else if (!isOnline) {\r\n\t\t\tsetError(\r\n\t\t\t\t'There seems to be a problem with the Internet connection. Translator functionality may be limited.'\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tsetError('');\r\n\t\t}\r\n\t}, [isOnline, hasLimitExceeded]);\r\n\r\n\t// Debouncer\r\n\tuseEffect(() => {\r\n\t\t// Limpia el timeout anterior\r\n\t\twindow.clearTimeout(timeoutID.current);\r\n\t\tif (hasLimitExceeded || !isOnline || !sourceText.trim()) return;\r\n\t\t// Si hay un término de mínimo 3 caracteres hace la llamada al api\r\n\t\ttimeoutID.current = window.setTimeout(() => {\r\n\t\t\ttranslate(\r\n\t\t\t\tsourceText,\r\n\t\t\t\tlanguageInfo.source.substring(0, 2),\r\n\t\t\t\tlanguageInfo.result.substr(0, 2)\r\n\t\t\t);\r\n\t\t}, 500);\r\n\t}, [hasLimitExceeded, isOnline, sourceText, translate, languageInfo]);\r\n\r\n\treturn (\r\n\t\t<TranslateContext.Provider\r\n\t\t\tvalue={{\r\n\t\t\t\tlanguageInfo,\r\n\t\t\t\tmsgError,\r\n\t\t\t\tresultText,\r\n\t\t\t\tsourceText,\r\n\t\t\t\tclearText,\r\n\t\t\t\tsetLanguageInfo,\r\n\t\t\t\tsetText: setSourceText,\r\n\t\t\t\tswapLanguages,\r\n\t\t\t\ttranslate,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{children}\r\n\t\t</TranslateContext.Provider>\r\n\t);\r\n};\r\n","import styled from 'styled-components';\n\nconst Wrapper = styled.div`\n\tmax-width: 124rem;\n\tmargin: 0 auto;\n\tpadding: 0 2rem;\n\twidth: 100%;\n`;\n\nexport default Wrapper;\n","import { Dispatch, MouseEvent, SetStateAction } from 'react';\r\nimport styled from 'styled-components';\r\nimport { MdSwapHoriz } from 'react-icons/md';\r\nimport Languages, { LanguageInfo } from '../constants/languages';\r\n\r\ninterface LanguagesBarProps {\r\n\tsourceLanguage: Languages;\r\n\tresultLanguage: Languages;\r\n\tswapLanguages(): void;\r\n\tsetLanguageInfo: Dispatch<SetStateAction<LanguageInfo>>;\r\n}\r\n\r\nconst StyledBar = styled.div`\r\n\tgrid-column: 1 / -1;\r\n\tdisplay: flex;\r\n\tmargin-bottom: 3rem;\r\n\tpadding: 0 2rem;\r\n\tbox-shadow: 0 0 5px 2px var(--color-bg-3);\r\n\tborder-radius: 10rem;\r\n`;\r\n\r\nconst LanguageList = styled.ul`\r\n\tflex: 1;\r\n\tlist-style: none;\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tdisplay: flex;\r\n\t&:last-of-type {\r\n\t\tjustify-content: flex-end;\r\n\t}\r\n`;\r\n\r\nconst LanguageItem = styled.li`\r\n\tborder-bottom: 3px solid transparent;\r\n\tcolor: var(--color-primary);\r\n\tcursor: pointer;\r\n\tpadding: 0.8rem 1.5rem;\r\n\ttext-align: center;\r\n\tuser-select: none;\r\n\ttransition: 0.3s ease;\r\n\tdisplay: inline-flex;\r\n\talign-items: center;\r\n\t&:hover,\r\n\t&:focus {\r\n\t\tbackground-color: var(--color-bg-3);\r\n\t}\r\n\r\n\t&:not(.selected) {\r\n\t\tdisplay: none;\r\n\t}\r\n\t@media (min-width: 56.25em) {\r\n\t\tcolor: var(--color-text);\r\n\t\t&.selected {\r\n\t\t\tborder-bottom-color: var(--color-primary);\r\n\t\t}\r\n\t\t&:not(.selected) {\r\n\t\t\tdisplay: inline-flex;\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst SwapLanguage = styled.button`\r\n\tbackground-color: var(--color-primary);\r\n\tborder: none;\r\n\tborder-radius: 50%;\r\n\tcolor: #fff;\r\n\tcursor: pointer;\r\n\theight: 5rem;\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\twidth: 5rem;\r\n\t/* position: relative;\r\n\ttop: -2rem; */\r\n`;\r\n\r\nfunction LanguagesBar({\r\n\tsourceLanguage,\r\n\tresultLanguage,\r\n\tswapLanguages,\r\n\tsetLanguageInfo,\r\n}: LanguagesBarProps) {\r\n\tconst handleSourceClick = (event: MouseEvent<HTMLLIElement>) => {\r\n\t\tconst language = event.currentTarget.dataset.lang as Languages;\r\n\t\tif (language === resultLanguage) {\r\n\t\t\tswapLanguages();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsetLanguageInfo({ result: resultLanguage, source: language });\r\n\t};\r\n\r\n\tconst handleResultClick = (event: MouseEvent<HTMLLIElement>) => {\r\n\t\tconst language = event.currentTarget.dataset.lang as Languages;\r\n\t\tif (language === sourceLanguage) {\r\n\t\t\tswapLanguages();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsetLanguageInfo({ source: sourceLanguage, result: language });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<StyledBar>\r\n\t\t\t<LanguageList>\r\n\t\t\t\t{/* <LanguageItem>Detect Language</LanguageItem> */}\r\n\t\t\t\t<LanguageItem\r\n\t\t\t\t\tonClick={handleSourceClick}\r\n\t\t\t\t\tdata-lang=\"en-US\"\r\n\t\t\t\t\tclassName={sourceLanguage === 'en-US' ? 'selected' : ''}\r\n\t\t\t\t>\r\n\t\t\t\t\tEnglish\r\n\t\t\t\t</LanguageItem>\r\n\t\t\t\t<LanguageItem\r\n\t\t\t\t\tonClick={handleSourceClick}\r\n\t\t\t\t\tdata-lang=\"es-US\"\r\n\t\t\t\t\tclassName={sourceLanguage === 'es-US' ? 'selected' : ''}\r\n\t\t\t\t>\r\n\t\t\t\t\tSpanish\r\n\t\t\t\t</LanguageItem>\r\n\t\t\t</LanguageList>\r\n\t\t\t<SwapLanguage\r\n\t\t\t\taria-label=\"Swap Language\"\r\n\t\t\t\tdata-title=\"Swap Language\"\r\n\t\t\t\tonClick={swapLanguages}\r\n\t\t\t>\r\n\t\t\t\t<MdSwapHoriz color=\"currentColor\" size=\"28\" />\r\n\t\t\t</SwapLanguage>\r\n\t\t\t<LanguageList>\r\n\t\t\t\t<LanguageItem\r\n\t\t\t\t\tonClick={handleResultClick}\r\n\t\t\t\t\tdata-lang=\"en-US\"\r\n\t\t\t\t\tclassName={resultLanguage === 'en-US' ? 'selected' : ''}\r\n\t\t\t\t>\r\n\t\t\t\t\tEnglish\r\n\t\t\t\t</LanguageItem>\r\n\t\t\t\t<LanguageItem\r\n\t\t\t\t\tonClick={handleResultClick}\r\n\t\t\t\t\tdata-lang=\"es-US\"\r\n\t\t\t\t\tclassName={resultLanguage === 'es-US' ? 'selected' : ''}\r\n\t\t\t\t>\r\n\t\t\t\t\tSpanish\r\n\t\t\t\t</LanguageItem>\r\n\t\t\t</LanguageList>\r\n\t\t</StyledBar>\r\n\t);\r\n}\r\n\r\nexport default LanguagesBar;\r\n","const useSpeechSynthesis = (\r\n\ttext: string,\r\n\tlanguage: string\r\n): [boolean, (onEnd: () => void) => void, () => void] => {\r\n\tconst isSupported: boolean = window.speechSynthesis !== undefined;\r\n\r\n\tconst textToSpeech = (onEnd: () => void) => {\r\n\t\tconst utterance: SpeechSynthesisUtterance =\r\n\t\t\tnew SpeechSynthesisUtterance(text);\r\n\t\tutterance.onend = onEnd;\r\n\t\tutterance.lang = language;\r\n\t\twindow.speechSynthesis.speak(utterance);\r\n\t};\r\n\r\n\tconst cancelSpeechSynthesis = () => window.speechSynthesis.cancel();\r\n\r\n\treturn [isSupported, textToSpeech, cancelSpeechSynthesis];\r\n};\r\n\r\nexport default useSpeechSynthesis;\r\n","import { Dispatch, SetStateAction } from 'react';\r\n\r\nconst useSpeechRecognition = (\r\n\tlanguage: string,\r\n\tsetText: Dispatch<SetStateAction<string>>\r\n): [boolean, (onEnd: () => void) => void, () => void] => {\r\n\tconst isSupported = window.SpeechRecognition !== undefined,\r\n\t\tisSupportedWithPrefix =\r\n\t\t\t(window as any).webkitSpeechRecognition !== undefined;\r\n\r\n\tlet speech = isSupported\r\n\t\t? new SpeechRecognition()\r\n\t\t: isSupportedWithPrefix\r\n\t\t? new (window as any).webkitSpeechRecognition()\r\n\t\t: {};\r\n\r\n\tconst onSpeak = (\r\n\t\t{ results }: SpeechRecognitionEvent,\r\n\t\tonEnd: () => void\r\n\t) => {\r\n\t\tconst [result] = Array.from(results[0]),\r\n\t\t\t{ transcript } = result;\r\n\t\tsetText(transcript);\r\n\t\tonEnd();\r\n\t};\r\n\r\n\tconst startSpeechRecognition = (onEnd: () => void) => {\r\n\t\tspeech.lang = language;\r\n\t\tspeech.start();\r\n\t\tspeech.addEventListener('result', (e: SpeechRecognitionEvent) =>\r\n\t\t\tonSpeak(e, onEnd)\r\n\t\t);\r\n\t};\r\n\r\n\tconst abortSpeechRecognition = () => speech.abort();\r\n\r\n\treturn [\r\n\t\tisSupported || isSupportedWithPrefix,\r\n\t\tstartSpeechRecognition,\r\n\t\tabortSpeechRecognition,\r\n\t];\r\n};\r\n\r\nexport default useSpeechRecognition;\r\n","import { css } from 'styled-components';\n\nexport const textBoxStyles = css`\n\tborder-radius: 2.5rem;\n\tbox-shadow: 0 0 5px 2px var(--color-bg-3);\n\theight: auto;\n\tpadding: 2rem 2rem 0;\n\tposition: relative;\n`;\n","import { FormEvent } from 'react';\r\nimport styled from 'styled-components';\r\nimport { textBoxStyles } from '../styles/mixins';\r\n\r\nconst TextBox = styled.div`\r\n\t${textBoxStyles};\r\n`;\r\n\r\nexport const Actions = styled.div`\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n`;\r\n\r\nconst handleAutoGrow = ({ currentTarget }: FormEvent<HTMLTextAreaElement>) => {\r\n\tcurrentTarget.style.height = 'auto';\r\n\tcurrentTarget.style.height = `${currentTarget.scrollHeight}px`;\r\n};\r\n\r\nexport const TextArea = styled.textarea.attrs((props) => ({\r\n\t...props,\r\n\tonInput: handleAutoGrow,\r\n}))`\r\n\tbackground: none;\r\n\tborder: none;\r\n\tcolor: var(--color-text);\r\n\tdisplay: block;\r\n\tfont-family: inherit;\r\n\tfont-size: 1.6rem;\r\n\tline-height: 1.6;\r\n\tmin-height: 17rem;\r\n\theight: auto;\r\n\tresize: none;\r\n\toverflow: hidden;\r\n\tpadding-bottom: 2rem;\r\n\tpadding-right: 1rem;\r\n\twidth: 100%;\r\n\t&:focus {\r\n\t\toutline: none;\r\n\t}\r\n\t&::placeholder {\r\n\t\tcolor: currentColor;\r\n\t\topacity: 0.79;\r\n\t\tfont-size: 2.4rem;\r\n\t}\r\n`;\r\n\r\nexport default TextBox;\r\n","import styled from 'styled-components';\n\ninterface BtnIconProps {\n\tshow?: boolean;\n}\n\nconst BtnIcon = styled.button<BtnIconProps>`\n\tbackground: none;\n\tborder: none;\n\tcolor: inherit;\n\tcursor: pointer;\n\tdisplay: inline-block;\n\tmargin: 0;\n\tpadding: 1.2rem;\n\ttext-align: center;\n\topacity: ${({ show = true }) => (show ? '1' : '0')};\n\tvisibility: ${({ show = true }) => (show ? 'visible' : 'hidden')};\n\ttransition: 0.3s ease-out;\n`;\n\nexport default BtnIcon;\n","import { MouseEvent, ReactElement, useState } from 'react';\r\nimport { MdStop } from 'react-icons/md';\r\nimport BtnIcon from './BtnIcon';\r\n\r\ninterface BtnWithPlayStateProps {\r\n\ticon: ReactElement;\r\n\tlabel?: string;\r\n\ttitle?: string;\r\n\tshow?: boolean;\r\n\tonClick: (onEnd: () => void) => void;\r\n\tonCancel: () => void;\r\n}\r\n\r\nfunction BtnWithPlayState({\r\n\ticon,\r\n\tlabel,\r\n\ttitle,\r\n\tshow,\r\n\tonClick,\r\n\tonCancel,\r\n}: BtnWithPlayStateProps) {\r\n\tconst [isPlaying, setPlaying] = useState(false);\r\n\r\n\tconst handlePlay = (e: MouseEvent<HTMLButtonElement>) => {\r\n\t\tsetPlaying(!isPlaying);\r\n\t\tif (isPlaying) {\r\n\t\t\tonCancel();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Esto cambia el icono de detener por el default\r\n\t\tonClick(() => {\r\n\t\t\tsetPlaying(false);\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<BtnIcon\r\n\t\t\t\tonClick={handlePlay}\r\n\t\t\t\tshow={show}\r\n\t\t\t\taria-label={label}\r\n\t\t\t\tdata-title={title}\r\n\t\t\t>\r\n\t\t\t\t{isPlaying ? <MdStop size=\"24\" color=\"currentColor\" /> : icon}\r\n\t\t\t</BtnIcon>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default BtnWithPlayState;\r\n","import { ChangeEvent, useContext, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { MdClear, MdMic, MdVolumeUp } from 'react-icons/md';\r\nimport { TranslateBoxProps } from '../constants/languages';\r\nimport { TranslateContext } from '../context/TranslateContext';\r\nimport useSpeechSynthesis from '../hooks/useSpeechSynthesis';\r\nimport useSpeechRecognition from '../hooks/useSpeechRecognition';\r\nimport TextBox, { Actions, TextArea } from './TextBox';\r\nimport BtnIcon from './BtnIcon';\r\nimport BtnWithPlayState from './BtnWithPlayState';\r\n\r\nconst CharactersCounter = styled.span`\r\n\tmargin-left: auto;\r\n`;\r\n\r\nconst BtnClear = styled(BtnIcon)`\r\n\tpadding: 0.6rem;\r\n\tposition: absolute !important;\r\n\tright: 0;\r\n\ttop: 2rem;\r\n`;\r\n\r\nfunction SourceBox({ language }: TranslateBoxProps) {\r\n\tconst charactersLimit = 200;\r\n\r\n\tconst {\r\n\t\tsourceText: text,\r\n\t\tclearText,\r\n\t\tsetText,\r\n\t} = useContext(TranslateContext);\r\n\r\n\tconst handleChange = ({\r\n\t\tcurrentTarget,\r\n\t}: ChangeEvent<HTMLTextAreaElement>) => {\r\n\t\tsetText(currentTarget.value.substring(0, charactersLimit));\r\n\t};\r\n\r\n\tconst [isSpeechSynthesisSupported, textToSpeech, cancelSpeechSynthesis] =\r\n\t\tuseSpeechSynthesis(text, language);\r\n\r\n\tconst [\r\n\t\tisSpeechRecognitionSupported,\r\n\t\tstartSpeechRecognition,\r\n\t\tabortSpeechRecognition,\r\n\t] = useSpeechRecognition(language, setText);\r\n\r\n\tconst textAreaRef = useRef<HTMLTextAreaElement>(null!);\r\n\r\n\tconst handleClear = () => {\r\n\t\tconst event = new Event('input', { bubbles: true });\r\n\t\ttextAreaRef.current.value = '';\r\n\t\ttextAreaRef.current.dispatchEvent(event);\r\n\t\tclearText();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<TextBox>\r\n\t\t\t<BtnClear\r\n\t\t\t\tshow={text.length > 0}\r\n\t\t\t\taria-label=\"Clear source text\"\r\n\t\t\t\tdata-title=\"Clear source text\"\r\n\t\t\t\tdata-tooltip-pos=\"right\"\r\n\t\t\t\tonClick={handleClear}\r\n\t\t\t>\r\n\t\t\t\t<MdClear size=\"24\" color=\"currentColor\" />\r\n\t\t\t</BtnClear>\r\n\t\t\t<TextArea\r\n\t\t\t\taria-label=\"Enter the source text\"\r\n\t\t\t\tmaxLength={charactersLimit}\r\n\t\t\t\tref={textAreaRef}\r\n\t\t\t\trows={2}\r\n\t\t\t\tvalue={text}\r\n\t\t\t\tonChange={handleChange}\r\n\t\t\t/>\r\n\t\t\t<Actions>\r\n\t\t\t\t{isSpeechRecognitionSupported && (\r\n\t\t\t\t\t<BtnWithPlayState\r\n\t\t\t\t\t\ticon={<MdMic size=\"24\" color=\"currentColor\" />}\r\n\t\t\t\t\t\tlabel=\"Translate by voice\"\r\n\t\t\t\t\t\ttitle=\"Translate by voice\"\r\n\t\t\t\t\t\tonClick={startSpeechRecognition}\r\n\t\t\t\t\t\tonCancel={abortSpeechRecognition}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\r\n\t\t\t\t{isSpeechSynthesisSupported && (\r\n\t\t\t\t\t<BtnWithPlayState\r\n\t\t\t\t\t\ticon={<MdVolumeUp size=\"24\" color=\"currentColor\" />}\r\n\t\t\t\t\t\tlabel=\"Listen\"\r\n\t\t\t\t\t\tshow={text.length > 0}\r\n\t\t\t\t\t\ttitle=\"Listen\"\r\n\t\t\t\t\t\tonClick={textToSpeech}\r\n\t\t\t\t\t\tonCancel={cancelSpeechSynthesis}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t\t<CharactersCounter>\r\n\t\t\t\t\t{text.length} / {charactersLimit}\r\n\t\t\t\t</CharactersCounter>\r\n\t\t\t</Actions>\r\n\t\t</TextBox>\r\n\t);\r\n}\r\n\r\nexport default SourceBox;\r\n","import {\r\n\tDispatch,\r\n\tReactNode,\r\n\tSetStateAction,\r\n\tuseEffect,\r\n\tuseState,\r\n} from 'react';\r\nimport styled from 'styled-components';\r\nimport { hideToastAnimation, showToastAnimation } from '../styles/animations';\r\n\r\ninterface BaseToastProps {\r\n\topen: boolean;\r\n}\r\n\r\ninterface ToastProps extends BaseToastProps {\r\n\tchildren?: ReactNode;\r\n\tonClose?: Dispatch<SetStateAction<boolean>>;\r\n}\r\n\r\nconst StyledToast = styled.div<BaseToastProps>`\r\n\tbackground-color: #323232;\r\n\tborder-radius: 0.4rem;\r\n\tcolor: #fff;\r\n\tfont-size: 1.4rem;\r\n\tfont-weight: 500;\r\n\tletter-spacing: 0.02857em;\r\n\tline-height: 1.75;\r\n\tmin-width: 8rem;\r\n\tpadding: 0.6rem 1.6rem;\r\n\tz-index: 10000;\r\n\tposition: fixed;\r\n\tleft: 2.5rem;\r\n\tbottom: 2.5rem;\r\n\tanimation: ${({ open }) => (open ? showToastAnimation : hideToastAnimation)}\r\n\t\t0.25s ease;\r\n`;\r\n\r\nfunction Toast({ children, open, onClose }: ToastProps) {\r\n\tconst [shouldRender, setRender] = useState(open);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (open) setRender(true);\r\n\t}, [open]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (open) {\r\n\t\t\tconst timeout: number = window.setTimeout(\r\n\t\t\t\t() => onClose && onClose(false),\r\n\t\t\t\t3000\r\n\t\t\t);\r\n\r\n\t\t\treturn () => window.clearTimeout(timeout);\r\n\t\t}\r\n\t}, [open, onClose]);\r\n\r\n\tconst handleAnimationEnd = () => {\r\n\t\tif (!open) setRender(false);\r\n\t};\r\n\r\n\tif (!shouldRender) return null;\r\n\r\n\treturn (\r\n\t\t<StyledToast onAnimationEnd={handleAnimationEnd} open={open}>\r\n\t\t\t{children}\r\n\t\t</StyledToast>\r\n\t);\r\n}\r\n\r\nexport default Toast;\r\n","import { useContext, useEffect, useRef, useState } from 'react';\r\nimport { MdContentCopy, MdVolumeUp } from 'react-icons/md';\r\nimport { TranslateBoxProps } from '../constants/languages';\r\nimport { TranslateContext } from '../context/TranslateContext';\r\nimport useSpeechSynthesis from '../hooks/useSpeechSynthesis';\r\nimport * as clipboard from '../helpers/clipboard';\r\nimport TextBox, { Actions, TextArea } from './TextBox';\r\nimport BtnIcon from './BtnIcon';\r\nimport BtnWithPlayState from './BtnWithPlayState';\r\nimport Toast from './Toast';\r\n\r\nfunction ResultBox({ language }: TranslateBoxProps) {\r\n\tconst [isToastOpen, setToastOpen] = useState(false);\r\n\r\n\tconst { resultText } = useContext(TranslateContext);\r\n\r\n\tconst textAreaRef = useRef<HTMLTextAreaElement>(null!);\r\n\r\n\tconst [isSpeechSynthesisSupported, textToSpeech, cancelSpeechSynthesis] =\r\n\t\tuseSpeechSynthesis(resultText, language);\r\n\r\n\tconst handleCopy = () => {\r\n\t\tclipboard\r\n\t\t\t.copy(resultText, textAreaRef.current)\r\n\t\t\t.then(() => setToastOpen(true));\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\ttextAreaRef.current.style.height = 'auto';\r\n\t\ttextAreaRef.current.style.height = `${textAreaRef.current.scrollHeight}px`;\r\n\t}, [resultText]);\r\n\r\n\treturn (\r\n\t\t<TextBox>\r\n\t\t\t<Toast open={isToastOpen} onClose={setToastOpen}>\r\n\t\t\t\tTranslation copied\r\n\t\t\t</Toast>\r\n\t\t\t<TextArea\r\n\t\t\t\tref={textAreaRef}\r\n\t\t\t\tvalue={resultText}\r\n\t\t\t\treadOnly={true}\r\n\t\t\t\tplaceholder=\"Translation\"\r\n\t\t\t\taria-label=\"Translation\"\r\n\t\t\t/>\r\n\t\t\t<Actions>\r\n\t\t\t\t{isSpeechSynthesisSupported && (\r\n\t\t\t\t\t<BtnWithPlayState\r\n\t\t\t\t\t\ticon={<MdVolumeUp size=\"24\" color=\"currentColor\" />}\r\n\t\t\t\t\t\tlabel=\"Listen\"\r\n\t\t\t\t\t\tshow={resultText.length > 0}\r\n\t\t\t\t\t\ttitle=\"Listen\"\r\n\t\t\t\t\t\tonClick={textToSpeech}\r\n\t\t\t\t\t\tonCancel={cancelSpeechSynthesis}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t\t<BtnIcon\r\n\t\t\t\t\tshow={resultText.length > 0}\r\n\t\t\t\t\taria-label=\"Copy translation\"\r\n\t\t\t\t\tdata-title=\"Copy translation\"\r\n\t\t\t\t\tonClick={handleCopy}\r\n\t\t\t\t>\r\n\t\t\t\t\t<MdContentCopy size=\"24\" color=\"currentColor\" />\r\n\t\t\t\t</BtnIcon>\r\n\t\t\t</Actions>\r\n\t\t</TextBox>\r\n\t);\r\n}\r\n\r\nexport default ResultBox;\r\n","export const copy = (\r\n\ttext: string,\r\n\telement: HTMLInputElement | HTMLTextAreaElement\r\n): Promise<void> => {\r\n\tif (window.navigator.clipboard !== undefined) {\r\n\t\treturn window.navigator.clipboard.writeText(text);\r\n\t}\r\n\treturn new Promise((res) => {\r\n\t\telement.select();\r\n\t\twindow.document.execCommand('copy');\r\n\t\twindow.getSelection()?.removeAllRanges();\r\n\t\tres();\r\n\t});\r\n};\r\n","import { ReactElement, ReactNode, useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { MdErrorOutline, MdCheckCircle } from 'react-icons/md';\r\nimport { hideAlertAnimation, showAlertAnimation } from '../styles/animations';\r\n\r\ninterface BaseAlertProps {\r\n\tseverity: 'success' | 'error';\r\n\tshow?: boolean;\r\n}\r\n\r\ninterface AlertProps extends BaseAlertProps {\r\n\tchildren?: ReactNode;\r\n\ticon?: ReactElement;\r\n}\r\n\r\nconst colors = {\r\n\tsuccess: ['var(--color-success)', 'var(--color-bg-success)'],\r\n\terror: ['var(--color-error)', 'var(--color-bg-error)'],\r\n};\r\n\r\nconst StyledAlert = styled.div<BaseAlertProps>`\r\n\tz-index: 100;\r\n\tcolor: ${({ severity }) => colors[severity][0]};\r\n\tbackground-color: ${({ severity }) => colors[severity][1]};\r\n\tfont-weight: 400;\r\n\tletter-spacing: 0.01071em;\r\n\twidth: 100%;\r\n\tpadding: 1.4rem 1rem;\r\n\tposition: absolute;\r\n\tleft: 0;\r\n\tdisplay: flex;\r\n\talign-items: flex-start;\r\n\t> :first-child {\r\n\t\tflex-shrink: 0;\r\n\t\tmargin-right: 1rem;\r\n\t}\r\n\tanimation: ${({ show }) => (show ? showAlertAnimation : hideAlertAnimation)}\r\n\t\t0.3s ease;\r\n`;\r\n\r\nconst AlertMessage = styled.span`\r\n\tfont-size: 1.4rem;\r\n`;\r\n\r\nconst icons = {\r\n\tsuccess: <MdCheckCircle size=\"22\" color=\"currentColor\" />,\r\n\terror: <MdErrorOutline size=\"22\" color=\"currentColor\" />,\r\n};\r\n\r\nfunction Alert({\r\n\tchildren,\r\n\ticon,\r\n\tseverity = 'success',\r\n\tshow = true,\r\n}: AlertProps) {\r\n\tconst [shouldRender, setRender] = useState(show);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (show) setRender(true);\r\n\t}, [show]);\r\n\r\n\tconst handleAnimationEnd = () => {\r\n\t\tif (!show) setRender(false);\r\n\t};\r\n\r\n\tif (!shouldRender) return null;\r\n\r\n\treturn (\r\n\t\t<StyledAlert\r\n\t\t\tonAnimationEnd={handleAnimationEnd}\r\n\t\t\trole=\"alert\"\r\n\t\t\tseverity={severity}\r\n\t\t\tshow={show}\r\n\t\t>\r\n\t\t\t{icon ? icon : icons[severity]}\r\n\t\t\t<AlertMessage>{children}</AlertMessage>\r\n\t\t</StyledAlert>\r\n\t);\r\n}\r\n\r\nexport default Alert;\r\n","import { useContext } from 'react';\r\nimport styled from 'styled-components';\r\nimport { TranslateContext } from '../context/TranslateContext';\r\nimport Wrapper from './Wrapper';\r\nimport LanguagesBar from './LanguagesBar';\r\nimport SourceBox from './SourceBox';\r\nimport ResultBox from './ResultBox';\r\nimport Alert from './Alert';\r\n\r\nconst StyledTranslator = styled.main`\r\n\tmargin: 2rem 0;\r\n`;\r\n\r\nconst Grid = styled.div`\r\n\tposition: relative;\r\n\tdisplay: grid;\r\n\tgap: 2rem;\r\n\t@media (min-width: 56.25em) {\r\n\t\tgap: 0;\r\n\t\tgrid-template-columns: repeat(2, 1fr);\r\n\t}\r\n`;\r\n\r\nfunction Translator() {\r\n\tconst { languageInfo, msgError, swapLanguages, setLanguageInfo } =\r\n\t\tuseContext(TranslateContext);\r\n\r\n\treturn (\r\n\t\t<StyledTranslator>\r\n\t\t\t<Wrapper>\r\n\t\t\t\t<Grid>\r\n\t\t\t\t\t<Alert severity=\"error\" show={msgError !== ''}>\r\n\t\t\t\t\t\t{msgError}\r\n\t\t\t\t\t</Alert>\r\n\t\t\t\t\t<LanguagesBar\r\n\t\t\t\t\t\tsourceLanguage={languageInfo.source}\r\n\t\t\t\t\t\tresultLanguage={languageInfo.result}\r\n\t\t\t\t\t\tswapLanguages={swapLanguages}\r\n\t\t\t\t\t\tsetLanguageInfo={setLanguageInfo}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<SourceBox language={languageInfo.source} />\r\n\t\t\t\t\t<ResultBox language={languageInfo.result} />\r\n\t\t\t\t</Grid>\r\n\t\t\t</Wrapper>\r\n\t\t</StyledTranslator>\r\n\t);\r\n}\r\n\r\nexport default Translator;\r\n"],"sourceRoot":""}