{"version":3,"sources":["hooks/useTheme.ts","context/ThemeContext.tsx","hooks/useVoices.ts","context/SpeechContext.tsx","styles/globalStyles.tsx","components/Switch.tsx","components/Wrapper.tsx","components/Header.tsx","components/LanguagesBar.tsx","styles/mixins.ts","components/TextBox.tsx","components/BtnIcon.tsx","components/BtnWithPlayState.tsx","components/SourceBox.tsx","components/ResultBox.tsx","components/Translator.tsx","pages/HomePage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useTheme","useState","theme","setTheme","useEffect","handleColorScheme","e","matches","lsTheme","window","localStorage","getItem","mql","matchMedia","addEventListener","removeEventListener","setItem","document","body","className","ThemeContext","createContext","ThemeProvider","children","Provider","value","useVoices","speechSynthesis","getVoices","voices","setVoices","console","log","SpeechContext","SpeechProvider","GlobalStyles","createGlobalStyle","StyledSwitch","styled","label","on","Switch","useContext","onChange","currentTarget","checked","type","Wrapper","div","Title","h1","HeaderContent","Header","StyledBar","LanguageList","ul","LanguageItem","li","SwapLanguage","button","LanguagesBar","sourceLanguage","resultLanguage","swapLanguages","setSourceLanguage","setResultLanguage","handleSourceClick","event","language","dataset","lang","handleResultClick","onClick","data-lang","aria-label","data-title","color","size","textBoxStyles","css","TextBox","Actions","TextArea","textarea","BtnIcon","show","BtnWithPlayState","icon","title","isPlaying","setPlaying","cancel","CharactersCounter","span","BtnClear","SourceBox","text","setText","charactersLimit","onSpeak","results","Array","from","transcript","length","data-tooltip-pos","maxLength","substring","SpeechRecognition","webkitSpeechRecognition","speech","start","onEnd","utterance","SpeechSynthesisUtterance","onend","voice","find","includes","speak","ResultBox","StyledTranslator","main","Grid","Translator","aux","HomePage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7d50e5be.chunk.js","sourcesContent":["import { Dispatch, SetStateAction, useEffect, useState } from 'react';\n\ntype AppTheme = 'light' | 'dark';\n\nconst useTheme = (): [AppTheme, Dispatch<SetStateAction<AppTheme>>] => {\n\tconst [theme, setTheme] = useState<AppTheme>('dark');\n\n\tuseEffect(() => {\n\t\tconst handleColorScheme = (e: MediaQueryListEvent) => {\n\t\t\tsetTheme(e.matches ? 'light' : 'dark');\n\t\t};\n\n\t\tconst lsTheme = window.localStorage.getItem('translator-app:theme');\n\n\t\tif (lsTheme === 'light') {\n\t\t\tsetTheme(lsTheme);\n\t\t\treturn;\n\t\t}\n\t\tconst mql: MediaQueryList = window.matchMedia(\n\t\t\t'(prefers-color-scheme: light)'\n\t\t);\n\n\t\tif (mql.matches) {\n\t\t\tsetTheme('light');\n\t\t}\n\n\t\tmql.addEventListener('change', handleColorScheme);\n\n\t\treturn () => mql.removeEventListener('change', handleColorScheme);\n\t}, []);\n\n\tuseEffect(() => {\n\t\twindow.localStorage.setItem('translator-app:theme', theme);\n\t\tdocument.body.className = theme;\n\t}, [theme]);\n\n\treturn [theme, setTheme];\n};\n\nexport default useTheme;\n","import { createContext, Dispatch, ReactNode, SetStateAction } from 'react';\nimport AppTheme from '../constants/theme';\nimport useTheme from '../hooks/useTheme';\n\ninterface ThemeContextInt {\n\ttheme: AppTheme;\n\tsetTheme: Dispatch<SetStateAction<AppTheme>>;\n}\n\nexport const ThemeContext = createContext({} as ThemeContextInt);\n\nexport const ThemeProvider = ({ children }: { children: ReactNode }) => {\n\tconst [theme, setTheme] = useTheme();\n\n\treturn (\n\t\t<ThemeContext.Provider\n\t\t\tvalue={{\n\t\t\t\ttheme,\n\t\t\t\tsetTheme,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</ThemeContext.Provider>\n\t);\n};\n","import { useEffect, useState } from 'react';\n\nconst useVoices = (): SpeechSynthesisVoice[] => {\n\tconst [voices, setVoices] = useState<SpeechSynthesisVoice[]>(\n\t\twindow.speechSynthesis.getVoices()\n\t);\n\n\tuseEffect(() => {\n\t\tconst getVoices = () => {\n\t\t\tconsole.log('new voices');\n\t\t\tsetVoices(window.speechSynthesis.getVoices());\n\t\t};\n\n\t\twindow.speechSynthesis.addEventListener('voiceschanged', getVoices);\n\t\treturn () =>\n\t\t\twindow.speechSynthesis.removeEventListener(\n\t\t\t\t'voiceschanged',\n\t\t\t\tgetVoices\n\t\t\t);\n\t}, []);\n\n\treturn voices;\n};\n\nexport default useVoices;\n","import { createContext, ReactNode } from 'react';\nimport useVoices from '../hooks/useVoices';\n\ninterface SpeechContextInt {\n\tvoices: SpeechSynthesisVoice[];\n}\n\nexport const SpeechContext = createContext({} as SpeechContextInt);\n\nexport const SpeechProvider = ({ children }: { children: ReactNode }) => {\n\tconst voices = useVoices();\n\n\treturn (\n\t\t<SpeechContext.Provider\n\t\t\tvalue={{\n\t\t\t\tvoices: voices,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</SpeechContext.Provider>\n\t);\n};\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n  :root {\n    --color-bg: #121212;\n    --color-bg-3:#424242;\n    --color-text: #fff;\n    --color-primary: #5290f5;\n  }\n  @media (prefers-color-scheme: light) {\n    :root {\n      --color-bg: #fff;\n      --color-bg-3:#d8d8d8;\n      --color-text: #000;\n      --color-primary: #5290f5;  \n    }\n  }\n  html {\n    box-sizing: border-box;\n    font-size: 62.5%;\n  }\n  *,\n  *::before,\n  *::after {\n    box-sizing: inherit;\n  }\n  body {\n    background-color: var(--color-bg);\n    color: var(--color-text);\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    font-size: 1.6rem;\n    line-height: 1.4;\n    margin: 0;\n  }\n  body.light {\n    --color-bg: #fff;\n    --color-bg-3:#d8d8d8;\n    --color-text: #000;\n    --color-primary: #5290f5;  \n  }\n  @media (any-hover: hover) {\n    [data-title] {\n    position: relative;\n    }\n    [data-title]:hover::before {\n      content: attr(data-title);\n      position: absolute;\n      bottom: 100%;\n      left: 0;\n      display: inline-block;\n      padding: 0.3rem 0.6rem;\n      border-radius: 2px;\n      background: #000;\n      color: #fff;\n      font-size: 1.2rem;\n      font-family: inherit;\n      white-space: nowrap;\n    }\n    [data-title][data-tooltip-pos=\"right\"]:hover::before {\n      left: unset;\n      right: 0;\n    }\n  }\n`;\n\nexport default GlobalStyles;\n","import { ChangeEvent, useContext } from 'react';\nimport styled from 'styled-components';\nimport { ThemeContext } from '../context/ThemeContext';\n\ninterface SwitchProps {\n\ton: boolean;\n}\n\nconst StyledSwitch = styled.label<SwitchProps>`\n\tbackground-color: ${({ on }) => (on ? 'var(--color-primary)' : '#4d4d4d')};\n\tborder-radius: 2.5rem;\n\twidth: 6rem;\n\theight: 2.5rem;\n\tpadding: 0.2rem;\n\ttransition: 0.3s ease;\n\t.switch-thumb {\n\t\tbackground-color: #fff;\n\t\tborder-radius: 50%;\n\t\tdisplay: block;\n\t\theight: 2rem;\n\t\twidth: 2rem;\n\t\ttransition: transform 0.3s ease-in;\n\t}\n\tinput[type='checkbox'] {\n\t\tdisplay: none;\n\t}\n\tinput[type='checkbox']:checked ~ .switch-thumb {\n\t\ttransform: translate3d(3.6rem, 0, 0);\n\t}\n`;\n\nfunction Switch({ on }: SwitchProps) {\n\tconst { setTheme } = useContext(ThemeContext);\n\n\tconst handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tsetTheme(e.currentTarget.checked ? 'dark' : 'light');\n\t};\n\n\treturn (\n\t\t<StyledSwitch on={on}>\n\t\t\t<input onChange={handleChange} type=\"checkbox\" checked={on} />\n\t\t\t<span className=\"switch-thumb\" />\n\t\t</StyledSwitch>\n\t);\n}\n\nexport default Switch;\n","import styled from 'styled-components';\n\nconst Wrapper = styled.div`\n\tmax-width: 124rem;\n\tmargin: 0 auto;\n\tpadding: 0 2rem;\n\twidth: 100%;\n`;\n\nexport default Wrapper;\n","import { useContext } from 'react';\nimport styled from 'styled-components';\nimport { ThemeContext } from '../context/ThemeContext';\nimport Switch from './Switch';\nimport Wrapper from './Wrapper';\n\nconst Title = styled.h1`\n\tcursor: default;\n\tfont-size: 3rem;\n\tfont-weight: 500;\n`;\n\nconst HeaderContent = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-between;\n`;\n\nfunction Header() {\n\tconst { theme } = useContext(ThemeContext);\n\n\treturn (\n\t\t<header>\n\t\t\t<Wrapper>\n\t\t\t\t<HeaderContent>\n\t\t\t\t\t<Title>Translate</Title>\n\t\t\t\t\t<Switch on={theme === 'dark'} />\n\t\t\t\t</HeaderContent>\n\t\t\t</Wrapper>\n\t\t</header>\n\t);\n}\n\nexport default Header;\n","import { Dispatch, MouseEvent, SetStateAction } from 'react';\nimport styled from 'styled-components';\nimport { MdSwapHoriz } from 'react-icons/md';\nimport Languages from '../constants/languages';\n\ninterface LanguagesBarProps {\n\tsourceLanguage: Languages;\n\tresultLanguage: Languages;\n\tswapLanguages(): void;\n\tsetSourceLanguage: Dispatch<SetStateAction<Languages>>;\n\tsetResultLanguage: Dispatch<SetStateAction<Languages>>;\n}\n\nconst StyledBar = styled.div`\n\tgrid-column: 1 / -1;\n\tdisplay: flex;\n\tmargin-bottom: 3rem;\n\tpadding: 0 2rem;\n\tbox-shadow: 0 0 5px 2px var(--color-bg-3);\n\tborder-radius: 10rem;\n`;\n\nconst LanguageList = styled.ul`\n\tflex: 1;\n\tlist-style: none;\n\tmargin: 0;\n\tpadding: 0;\n\tdisplay: flex;\n\t&:last-of-type {\n\t\tjustify-content: flex-end;\n\t}\n`;\n\nconst LanguageItem = styled.li`\n\tborder-bottom: 3px solid transparent;\n\tcolor: var(--color-primary);\n\tcursor: pointer;\n\tpadding: 0.8rem 1.5rem;\n\ttext-align: center;\n\tuser-select: none;\n\ttransition: 0.3s ease;\n\tdisplay: inline-flex;\n\talign-items: center;\n\t&:hover,\n\t&:focus {\n\t\tbackground-color: var(--color-bg-3);\n\t}\n\n\t&:not(.selected) {\n\t\tdisplay: none;\n\t}\n\t@media (min-width: 56.25em) {\n\t\tcolor: var(--color-text);\n\t\t&.selected {\n\t\t\tborder-bottom-color: var(--color-primary);\n\t\t}\n\t\t&:not(.selected) {\n\t\t\tdisplay: inline-flex;\n\t\t}\n\t}\n`;\n\nconst SwapLanguage = styled.button`\n\tbackground-color: var(--color-primary);\n\tborder: none;\n\tborder-radius: 50%;\n\tcolor: #fff;\n\tcursor: pointer;\n\theight: 5rem;\n\tmargin: 0;\n\tpadding: 0;\n\twidth: 5rem;\n\t/* position: relative;\n\ttop: -2rem; */\n`;\n\nfunction LanguagesBar({\n\tsourceLanguage,\n\tresultLanguage,\n\tswapLanguages,\n\tsetSourceLanguage,\n\tsetResultLanguage,\n}: LanguagesBarProps) {\n\tconst handleSourceClick = (event: MouseEvent<HTMLLIElement>) => {\n\t\tconst language = event.currentTarget.dataset.lang as Languages;\n\t\tif (language === resultLanguage) {\n\t\t\tswapLanguages();\n\t\t\treturn;\n\t\t}\n\t\tsetSourceLanguage(language);\n\t};\n\n\tconst handleResultClick = (event: MouseEvent<HTMLLIElement>) => {\n\t\tconst language = event.currentTarget.dataset.lang as Languages;\n\t\tif (language === sourceLanguage) {\n\t\t\tswapLanguages();\n\t\t\treturn;\n\t\t}\n\t\tsetResultLanguage(language);\n\t};\n\n\treturn (\n\t\t<StyledBar>\n\t\t\t<LanguageList>\n\t\t\t\t{/* <LanguageItem>Detect Language</LanguageItem> */}\n\t\t\t\t<LanguageItem\n\t\t\t\t\tonClick={handleSourceClick}\n\t\t\t\t\tdata-lang=\"en-US\"\n\t\t\t\t\tclassName={sourceLanguage === 'en-US' ? 'selected' : ''}\n\t\t\t\t>\n\t\t\t\t\tEnglish\n\t\t\t\t</LanguageItem>\n\t\t\t\t<LanguageItem\n\t\t\t\t\tonClick={handleSourceClick}\n\t\t\t\t\tdata-lang=\"es-US\"\n\t\t\t\t\tclassName={sourceLanguage === 'es-US' ? 'selected' : ''}\n\t\t\t\t>\n\t\t\t\t\tSpanish\n\t\t\t\t</LanguageItem>\n\t\t\t</LanguageList>\n\t\t\t<SwapLanguage\n\t\t\t\taria-label=\"Swap Language\"\n\t\t\t\tdata-title=\"Swap Language\"\n\t\t\t\tonClick={swapLanguages}\n\t\t\t>\n\t\t\t\t<MdSwapHoriz color=\"currentColor\" size=\"28\" />\n\t\t\t</SwapLanguage>\n\t\t\t<LanguageList>\n\t\t\t\t<LanguageItem\n\t\t\t\t\tonClick={handleResultClick}\n\t\t\t\t\tdata-lang=\"en-US\"\n\t\t\t\t\tclassName={resultLanguage === 'en-US' ? 'selected' : ''}\n\t\t\t\t>\n\t\t\t\t\tEnglish\n\t\t\t\t</LanguageItem>\n\t\t\t\t<LanguageItem\n\t\t\t\t\tonClick={handleResultClick}\n\t\t\t\t\tdata-lang=\"es-US\"\n\t\t\t\t\tclassName={resultLanguage === 'es-US' ? 'selected' : ''}\n\t\t\t\t>\n\t\t\t\t\tSpanish\n\t\t\t\t</LanguageItem>\n\t\t\t</LanguageList>\n\t\t</StyledBar>\n\t);\n}\n\nexport default LanguagesBar;\n","import { css } from 'styled-components';\n\nexport const textBoxStyles = css`\n\tborder-radius: 2.5rem;\n\tbox-shadow: 0 0 5px 2px var(--color-bg-3);\n\theight: auto;\n\tpadding: 2rem 2rem 0;\n\tposition: relative;\n`;\n","import styled from 'styled-components';\nimport { textBoxStyles } from '../styles/mixins';\n\nconst TextBox = styled.div`\n\t${textBoxStyles};\n`;\n\nexport const Actions = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n`;\n\nexport const TextArea = styled.textarea`\n\tbackground: none;\n\tborder: none;\n\tcolor: var(--color-text);\n\tdisplay: block;\n\tfont-family: inherit;\n\tfont-size: 1.6rem;\n\tline-height: 1.6;\n\tmin-height: 17rem;\n\theight: auto;\n\tresize: none;\n\toverflow: hidden;\n\tpadding-bottom: 2rem;\n\tpadding-right: 1rem;\n\twidth: 100%;\n\t&:focus {\n\t\toutline: none;\n\t}\n`;\n\n// function calcHeight(scrollHeight: number): number {\n// \tconsole.log('scroll height:', scrollHeight);\n// \tif (!scrollHeight) return 170;\n// \t// Height / line height\n// \tconst lines = Math.ceil(scrollHeight / 25.6);\n// \t// min-height + lines x line-height + padding + border\n// \tconst newHeight = Math.ceil(lines * 25.6);\n// \tconsole.log(lines);\n// \treturn newHeight;\n// }\n\nexport default TextBox;\n","import styled from 'styled-components';\n\ninterface BtnIconProps {\n\tshow?: boolean;\n}\n\nconst BtnIcon = styled.button<BtnIconProps>`\n\tbackground: none;\n\tborder: none;\n\tcolor: inherit;\n\tcursor: pointer;\n\tdisplay: inline-block;\n\tmargin: 0;\n\tpadding: 1.2rem;\n\ttext-align: center;\n\topacity: ${({ show = true }) => (show ? '1' : '0')};\n\tvisibility: ${({ show = true }) => (show ? 'visible' : 'hidden')};\n\ttransition: 0.3s ease-out;\n`;\n\nexport default BtnIcon;\n","import { MouseEvent, MouseEventHandler, ReactElement, useState } from 'react';\nimport { MdStop } from 'react-icons/md';\nimport BtnIcon from './BtnIcon';\n\ninterface BtnWithPlayStateProps {\n\ticon: ReactElement;\n\tlabel?: string;\n\ttitle?: string;\n\tshow?: boolean;\n\tonClick?: (\n\t\te: MouseEvent<HTMLButtonElement>,\n\t\tonEnd: () => void\n\t) => void | undefined;\n}\n\nfunction BtnWithPlayState({\n\ticon,\n\tlabel,\n\ttitle,\n\tshow,\n\tonClick,\n}: BtnWithPlayStateProps) {\n\tconst [isPlaying, setPlaying] = useState(false);\n\n\tconst handlePlay = (e: MouseEvent<HTMLButtonElement>) => {\n\t\tsetPlaying(!isPlaying);\n\t\tif (isPlaying) {\n\t\t\twindow.speechSynthesis.cancel();\n\t\t\treturn;\n\t\t}\n\t\tif (onClick) {\n\t\t\tonClick(e, () => {\n\t\t\t\tconsole.log('Finish');\n\t\t\t\tsetPlaying(false);\n\t\t\t});\n\t\t}\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<BtnIcon\n\t\t\t\tonClick={handlePlay}\n\t\t\t\tshow={show}\n\t\t\t\taria-label={label}\n\t\t\t\tdata-title={title}\n\t\t\t>\n\t\t\t\t{isPlaying ? <MdStop size=\"24\" color=\"currentColor\" /> : icon}\n\t\t\t</BtnIcon>\n\t\t</div>\n\t);\n}\n\nexport default BtnWithPlayState;\n","import { ChangeEvent, MouseEvent, useContext, useState } from 'react';\nimport styled from 'styled-components';\nimport { MdClear, MdMic, MdVolumeUp } from 'react-icons/md';\nimport { TranslateBoxProps } from '../constants/languages';\nimport { SpeechContext } from '../context/SpeechContext';\nimport TextBox, { Actions, TextArea } from './TextBox';\nimport BtnIcon from './BtnIcon';\nimport BtnWithPlayState from './BtnWithPlayState';\n\nconst CharactersCounter = styled.span`\n\tmargin-left: auto;\n`;\n\nconst BtnClear = styled(BtnIcon)`\n\tpadding: 0.6rem;\n\tposition: absolute !important;\n\tright: 0;\n\ttop: 2rem;\n`;\n\nfunction SourceBox({ language }: TranslateBoxProps) {\n\tconst [text, setText] = useState('');\n\tconst charactersLimit = 2000;\n\n\tconst handleChange = ({\n\t\tcurrentTarget,\n\t}: ChangeEvent<HTMLTextAreaElement>) => {\n\t\tsetText(currentTarget.value.substring(0, charactersLimit));\n\t};\n\n\tconst clearText = () => setText('');\n\n\tconst { voices } = useContext(SpeechContext);\n\n\tconsole.log(voices);\n\n\tconst speechText = (\n\t\te: MouseEvent<HTMLButtonElement>,\n\t\tonEnd: () => void\n\t) => {\n\t\tconst utterance = new SpeechSynthesisUtterance(text);\n\t\tutterance.onend = onEnd;\n\t\tutterance.lang = language;\n\t\tutterance.voice =\n\t\t\tvoices.find(({ lang }) => lang.includes(language)) || null;\n\t\tconsole.log(utterance.voice);\n\t\twindow.speechSynthesis.speak(utterance);\n\t};\n\n\tconst stopSpeech = () => window.speechSynthesis.cancel();\n\n\tconst handleTogglePlay = () => {};\n\n\tconst onSpeak = ({ results }: SpeechRecognitionEvent) => {\n\t\tconsole.log('on end');\n\t\tconsole.log(results);\n\t\tconst [result] = Array.from(results[0]),\n\t\t\t{ transcript } = result;\n\t\tconsole.log(transcript);\n\t};\n\n\tconst recognizeSpeech = () => {\n\t\tlet speech;\n\t\tif (window.SpeechRecognition) {\n\t\t\tspeech = new SpeechRecognition();\n\t\t} else if ((window as any).webkitSpeechRecognition) {\n\t\t\tspeech = new (window as any).webkitSpeechRecognition();\n\t\t}\n\t\tconsole.log(speech);\n\t\tspeech.start();\n\t\tspeech.addEventListener('result', onSpeak);\n\t};\n\n\treturn (\n\t\t<TextBox>\n\t\t\t<BtnClear\n\t\t\t\tshow={text.length > 0}\n\t\t\t\taria-label=\"Clear source text\"\n\t\t\t\tdata-title=\"Clear source text\"\n\t\t\t\tdata-tooltip-pos=\"right\"\n\t\t\t\tonClick={clearText}\n\t\t\t>\n\t\t\t\t<MdClear size=\"24\" color=\"currentColor\" />\n\t\t\t</BtnClear>\n\t\t\t<TextArea\n\t\t\t\tmaxLength={charactersLimit}\n\t\t\t\tvalue={text}\n\t\t\t\tonChange={handleChange}\n\t\t\t/>\n\t\t\t<Actions>\n\t\t\t\t{window.SpeechRecognition ||\n\t\t\t\t\t((window as any).webkitSpeechRecognition && (\n\t\t\t\t\t\t<BtnWithPlayState\n\t\t\t\t\t\t\tonClick={recognizeSpeech}\n\t\t\t\t\t\t\tlabel=\"Translate by voice\"\n\t\t\t\t\t\t\ttitle=\"Translate by voice\"\n\t\t\t\t\t\t\ticon={<MdMic size=\"24\" color=\"currentColor\" />}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\n\t\t\t\t{window.speechSynthesis && (\n\t\t\t\t\t<BtnWithPlayState\n\t\t\t\t\t\tonClick={speechText}\n\t\t\t\t\t\tshow={text.length > 0}\n\t\t\t\t\t\tlabel=\"Listen\"\n\t\t\t\t\t\ttitle=\"Listen\"\n\t\t\t\t\t\ticon={<MdVolumeUp size=\"24\" color=\"currentColor\" />}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t<CharactersCounter>\n\t\t\t\t\t{text.length} / {charactersLimit}\n\t\t\t\t</CharactersCounter>\n\t\t\t</Actions>\n\t\t</TextBox>\n\t);\n}\n\nexport default SourceBox;\n","import { MdContentCopy, MdVolumeUp } from 'react-icons/md';\nimport { TranslateBoxProps } from '../constants/languages';\nimport TextBox, { Actions, TextArea } from './TextBox';\nimport BtnIcon from './BtnIcon';\n\nfunction ResultBox({ language }: TranslateBoxProps) {\n\treturn (\n\t\t<TextBox>\n\t\t\t<TextArea />\n\t\t\t<Actions>\n\t\t\t\t<BtnIcon aria-label=\"Listen\" data-title=\"Listen\">\n\t\t\t\t\t<MdVolumeUp size=\"24\" color=\"currentColor\" />\n\t\t\t\t</BtnIcon>\n\t\t\t\t<BtnIcon\n\t\t\t\t\taria-label=\"Copy translation\"\n\t\t\t\t\tdata-title=\"Copy translation\"\n\t\t\t\t>\n\t\t\t\t\t<MdContentCopy size=\"24\" color=\"currentColor\" />\n\t\t\t\t</BtnIcon>\n\t\t\t</Actions>\n\t\t</TextBox>\n\t);\n}\n\nexport default ResultBox;\n","import { useState } from 'react';\nimport styled from 'styled-components';\nimport LanguageList from '../constants/languages';\nimport Wrapper from './Wrapper';\nimport LanguagesBar from './LanguagesBar';\nimport SourceBox from './SourceBox';\nimport ResultBox from './ResultBox';\n\nconst StyledTranslator = styled.main`\n\tmargin: 2rem 0;\n`;\n\nconst Grid = styled.div`\n\tdisplay: grid;\n\tgap: 2rem;\n\t@media (min-width: 56.25em) {\n\t\tgap: 0;\n\t\tgrid-template-columns: repeat(2, 1fr);\n\t}\n`;\n\nfunction Translator() {\n\tconst [sourceLanguage, setSourceLanguage] = useState<LanguageList>('en-US');\n\tconst [resultLanguage, setResultLanguage] = useState<LanguageList>('es-US');\n\n\tconst swapLanguages = (): void => {\n\t\tconst aux: LanguageList = sourceLanguage;\n\t\tsetSourceLanguage(resultLanguage);\n\t\tsetResultLanguage(aux);\n\t};\n\n\treturn (\n\t\t<StyledTranslator>\n\t\t\t<Wrapper>\n\t\t\t\t<Grid>\n\t\t\t\t\t<LanguagesBar\n\t\t\t\t\t\tsourceLanguage={sourceLanguage}\n\t\t\t\t\t\tresultLanguage={resultLanguage}\n\t\t\t\t\t\tswapLanguages={swapLanguages}\n\t\t\t\t\t\tsetSourceLanguage={setSourceLanguage}\n\t\t\t\t\t\tsetResultLanguage={setResultLanguage}\n\t\t\t\t\t/>\n\t\t\t\t\t<SourceBox language={sourceLanguage} />\n\t\t\t\t\t<ResultBox language={resultLanguage} />\n\t\t\t\t</Grid>\n\t\t\t</Wrapper>\n\t\t</StyledTranslator>\n\t);\n}\n\nexport default Translator;\n","import Header from '../components/Header';\nimport Translator from '../components/Translator';\n\nfunction HomePage() {\n\treturn (\n\t\t<div>\n\t\t\t<Header />\n\t\t\t<Translator />\n\t\t</div>\n\t);\n}\n\nexport default HomePage;\n","import { ThemeProvider } from './context/ThemeContext';\nimport { SpeechProvider } from './context/SpeechContext';\nimport GlobalStyles from './styles/globalStyles';\nimport HomePage from './pages/HomePage';\n\nfunction App() {\n\treturn (\n\t\t<ThemeProvider>\n\t\t\t<SpeechProvider>\n\t\t\t\t<GlobalStyles />\n\t\t\t\t<HomePage />\n\t\t\t</SpeechProvider>\n\t\t</ThemeProvider>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}